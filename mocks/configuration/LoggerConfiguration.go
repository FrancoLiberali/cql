// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	logger "gorm.io/gorm/logger"

	time "time"

	zap "go.uber.org/zap"
)

// LoggerConfiguration is an autogenerated mock type for the LoggerConfiguration type
type LoggerConfiguration struct {
	mock.Mock
}

// GetDisableStacktrace provides a mock function with given fields:
func (_m *LoggerConfiguration) GetDisableStacktrace() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetIgnoreRecordNotFoundError provides a mock function with given fields:
func (_m *LoggerConfiguration) GetIgnoreRecordNotFoundError() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetLogLevel provides a mock function with given fields:
func (_m *LoggerConfiguration) GetLogLevel() logger.LogLevel {
	ret := _m.Called()

	var r0 logger.LogLevel
	if rf, ok := ret.Get(0).(func() logger.LogLevel); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(logger.LogLevel)
	}

	return r0
}

// GetMode provides a mock function with given fields:
func (_m *LoggerConfiguration) GetMode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetParameterizedQueries provides a mock function with given fields:
func (_m *LoggerConfiguration) GetParameterizedQueries() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetRequestTemplate provides a mock function with given fields:
func (_m *LoggerConfiguration) GetRequestTemplate() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSlowQueryThreshold provides a mock function with given fields:
func (_m *LoggerConfiguration) GetSlowQueryThreshold() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetSlowTransactionThreshold provides a mock function with given fields:
func (_m *LoggerConfiguration) GetSlowTransactionThreshold() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Log provides a mock function with given fields: _a0
func (_m *LoggerConfiguration) Log(_a0 *zap.Logger) {
	_m.Called(_a0)
}

// Reload provides a mock function with given fields:
func (_m *LoggerConfiguration) Reload() {
	_m.Called()
}

type mockConstructorTestingTNewLoggerConfiguration interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoggerConfiguration creates a new instance of LoggerConfiguration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoggerConfiguration(t mockConstructorTestingTNewLoggerConfiguration) *LoggerConfiguration {
	mock := &LoggerConfiguration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
