// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// DatabaseConfiguration is an autogenerated mock type for the DatabaseConfiguration type
type DatabaseConfiguration struct {
	mock.Mock
}

// GetDBName provides a mock function with given fields:
func (_m *DatabaseConfiguration) GetDBName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetHost provides a mock function with given fields:
func (_m *DatabaseConfiguration) GetHost() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPassword provides a mock function with given fields:
func (_m *DatabaseConfiguration) GetPassword() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPort provides a mock function with given fields:
func (_m *DatabaseConfiguration) GetPort() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetRetry provides a mock function with given fields:
func (_m *DatabaseConfiguration) GetRetry() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetRetryTime provides a mock function with given fields:
func (_m *DatabaseConfiguration) GetRetryTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetSSLMode provides a mock function with given fields:
func (_m *DatabaseConfiguration) GetSSLMode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUsername provides a mock function with given fields:
func (_m *DatabaseConfiguration) GetUsername() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Log provides a mock function with given fields: logger
func (_m *DatabaseConfiguration) Log(logger *zap.Logger) {
	_m.Called(logger)
}

// Reload provides a mock function with given fields:
func (_m *DatabaseConfiguration) Reload() {
	_m.Called()
}

type mockConstructorTestingTNewDatabaseConfiguration interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabaseConfiguration creates a new instance of DatabaseConfiguration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaseConfiguration(t mockConstructorTestingTNewDatabaseConfiguration) *DatabaseConfiguration {
	mock := &DatabaseConfiguration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
