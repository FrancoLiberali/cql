// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	httperrors "github.com/ditrit/badaas/httperrors"
	mock "github.com/stretchr/testify/mock"

	model "github.com/ditrit/badaas/orm/model"

	models "github.com/ditrit/badaas/persistence/models"

	sessionservice "github.com/ditrit/badaas/services/sessionservice"
)

// SessionService is an autogenerated mock type for the SessionService type
type SessionService struct {
	mock.Mock
}

// IsValid provides a mock function with given fields: sessionUUID
func (_m *SessionService) IsValid(sessionUUID model.UUID) (bool, *sessionservice.SessionClaims) {
	ret := _m.Called(sessionUUID)

	var r0 bool
	var r1 *sessionservice.SessionClaims
	if rf, ok := ret.Get(0).(func(model.UUID) (bool, *sessionservice.SessionClaims)); ok {
		return rf(sessionUUID)
	}
	if rf, ok := ret.Get(0).(func(model.UUID) bool); ok {
		r0 = rf(sessionUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(model.UUID) *sessionservice.SessionClaims); ok {
		r1 = rf(sessionUUID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sessionservice.SessionClaims)
		}
	}

	return r0, r1
}

// LogUserIn provides a mock function with given fields: user
func (_m *SessionService) LogUserIn(user *models.User) (*models.Session, error) {
	ret := _m.Called(user)

	var r0 *models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (*models.Session, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) *models.Session); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogUserOut provides a mock function with given fields: sessionClaims
func (_m *SessionService) LogUserOut(sessionClaims *sessionservice.SessionClaims) httperrors.HTTPError {
	ret := _m.Called(sessionClaims)

	var r0 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(*sessionservice.SessionClaims) httperrors.HTTPError); ok {
		r0 = rf(sessionClaims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(httperrors.HTTPError)
		}
	}

	return r0
}

// RollSession provides a mock function with given fields: _a0
func (_m *SessionService) RollSession(_a0 model.UUID) httperrors.HTTPError {
	ret := _m.Called(_a0)

	var r0 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(model.UUID) httperrors.HTTPError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(httperrors.HTTPError)
		}
	}

	return r0
}

type mockConstructorTestingTNewSessionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionService creates a new instance of SessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionService(t mockConstructorTestingTNewSessionService) *SessionService {
	mock := &SessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
