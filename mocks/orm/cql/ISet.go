// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	cql "github.com/ditrit/badaas/orm/cql"
	mock "github.com/stretchr/testify/mock"
)

// ISet is an autogenerated mock type for the ISet type
type ISet struct {
	mock.Mock
}

// Field provides a mock function with given fields:
func (_m *ISet) Field() cql.IField {
	ret := _m.Called()

	var r0 cql.IField
	if rf, ok := ret.Get(0).(func() cql.IField); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cql.IField)
		}
	}

	return r0
}

// JoinNumber provides a mock function with given fields:
func (_m *ISet) JoinNumber() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Value provides a mock function with given fields:
func (_m *ISet) Value() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewISet interface {
	mock.TestingT
	Cleanup(func())
}

// NewISet creates a new instance of ISet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISet(t mockConstructorTestingTNewISet) *ISet {
	mock := &ISet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
