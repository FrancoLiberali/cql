// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	condition "github.com/ditrit/badaas/orm/condition"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ditrit/badaas/orm/model"
)

// CRUDRepository is an autogenerated mock type for the CRUDRepository type
type CRUDRepository[T model.Model, ID model.ID] struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, entity
func (_m *CRUDRepository[T, ID]) Create(tx *gorm.DB, entity *T) error {
	ret := _m.Called(tx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *T) error); ok {
		r0 = rf(tx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: tx, entity
func (_m *CRUDRepository[T, ID]) Delete(tx *gorm.DB, entity *T) error {
	ret := _m.Called(tx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *T) error); ok {
		r0 = rf(tx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: tx, id
func (_m *CRUDRepository[T, ID]) GetByID(tx *gorm.DB, id ID) (*T, error) {
	ret := _m.Called(tx, id)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ID) (*T, error)); ok {
		return rf(tx, id)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, ID) *T); ok {
		r0 = rf(tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, ID) error); ok {
		r1 = rf(tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: tx, conditions
func (_m *CRUDRepository[T, ID]) Query(tx *gorm.DB, conditions ...condition.Condition[T]) ([]*T, error) {
	_va := make([]interface{}, len(conditions))
	for _i := range conditions {
		_va[_i] = conditions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*T
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...condition.Condition[T]) ([]*T, error)); ok {
		return rf(tx, conditions...)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...condition.Condition[T]) []*T); ok {
		r0 = rf(tx, conditions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, ...condition.Condition[T]) error); ok {
		r1 = rf(tx, conditions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryOne provides a mock function with given fields: tx, conditions
func (_m *CRUDRepository[T, ID]) QueryOne(tx *gorm.DB, conditions ...condition.Condition[T]) (*T, error) {
	_va := make([]interface{}, len(conditions))
	for _i := range conditions {
		_va[_i] = conditions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...condition.Condition[T]) (*T, error)); ok {
		return rf(tx, conditions...)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...condition.Condition[T]) *T); ok {
		r0 = rf(tx, conditions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, ...condition.Condition[T]) error); ok {
		r1 = rf(tx, conditions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: tx, entity
func (_m *CRUDRepository[T, ID]) Save(tx *gorm.DB, entity *T) error {
	ret := _m.Called(tx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *T) error); ok {
		r0 = rf(tx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCRUDRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCRUDRepository creates a new instance of CRUDRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCRUDRepository[T model.Model, ID model.ID](t mockConstructorTestingTNewCRUDRepository) *CRUDRepository[T, ID] {
	mock := &CRUDRepository[T, ID]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
