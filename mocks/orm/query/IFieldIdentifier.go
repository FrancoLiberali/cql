// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	query "github.com/ditrit/badaas/orm/query"
	mock "github.com/stretchr/testify/mock"

	reflect "reflect"
)

// IFieldIdentifier is an autogenerated mock type for the IFieldIdentifier type
type IFieldIdentifier struct {
	mock.Mock
}

// ColumnName provides a mock function with given fields: _a0, table
func (_m *IFieldIdentifier) ColumnName(_a0 *query.GormQuery, table query.Table) string {
	ret := _m.Called(_a0, table)

	var r0 string
	if rf, ok := ret.Get(0).(func(*query.GormQuery, query.Table) string); ok {
		r0 = rf(_a0, table)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ColumnSQL provides a mock function with given fields: _a0, table
func (_m *IFieldIdentifier) ColumnSQL(_a0 *query.GormQuery, table query.Table) string {
	ret := _m.Called(_a0, table)

	var r0 string
	if rf, ok := ret.Get(0).(func(*query.GormQuery, query.Table) string); ok {
		r0 = rf(_a0, table)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldName provides a mock function with given fields:
func (_m *IFieldIdentifier) FieldName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetModelType provides a mock function with given fields:
func (_m *IFieldIdentifier) GetModelType() reflect.Type {
	ret := _m.Called()

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func() reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

type mockConstructorTestingTNewIFieldIdentifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewIFieldIdentifier creates a new instance of IFieldIdentifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIFieldIdentifier(t mockConstructorTestingTNewIFieldIdentifier) *IFieldIdentifier {
	mock := &IFieldIdentifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
