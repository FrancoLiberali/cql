// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	operator "github.com/ditrit/badaas/orm/operator"
	mock "github.com/stretchr/testify/mock"

	query "github.com/ditrit/badaas/orm/query"
)

// DynamicOperator is an autogenerated mock type for the DynamicOperator type
type DynamicOperator[T interface{}] struct {
	mock.Mock
}

// InterfaceVerificationMethod provides a mock function with given fields: _a0
func (_m *DynamicOperator[T]) InterfaceVerificationMethod(_a0 T) {
	_m.Called(_a0)
}

// SelectJoin provides a mock function with given fields: valueNumber, joinNumber
func (_m *DynamicOperator[T]) SelectJoin(valueNumber uint, joinNumber uint) operator.DynamicOperator[T] {
	ret := _m.Called(valueNumber, joinNumber)

	var r0 operator.DynamicOperator[T]
	if rf, ok := ret.Get(0).(func(uint, uint) operator.DynamicOperator[T]); ok {
		r0 = rf(valueNumber, joinNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(operator.DynamicOperator[T])
		}
	}

	return r0
}

// ToSQL provides a mock function with given fields: _a0, columnName
func (_m *DynamicOperator[T]) ToSQL(_a0 *query.GormQuery, columnName string) (string, []interface{}, error) {
	ret := _m.Called(_a0, columnName)

	var r0 string
	var r1 []interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(*query.GormQuery, string) (string, []interface{}, error)); ok {
		return rf(_a0, columnName)
	}
	if rf, ok := ret.Get(0).(func(*query.GormQuery, string) string); ok {
		r0 = rf(_a0, columnName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*query.GormQuery, string) []interface{}); ok {
		r1 = rf(_a0, columnName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(*query.GormQuery, string) error); ok {
		r2 = rf(_a0, columnName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewDynamicOperator interface {
	mock.TestingT
	Cleanup(func())
}

// NewDynamicOperator creates a new instance of DynamicOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDynamicOperator[T interface{}](t mockConstructorTestingTNewDynamicOperator) *DynamicOperator[T] {
	mock := &DynamicOperator[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
