// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	httperrors "github.com/ditrit/badaas/httperrors"
	mock "github.com/stretchr/testify/mock"
)

// BasicAuthenticationController is an autogenerated mock type for the BasicAuthenticationController type
type BasicAuthenticationController struct {
	mock.Mock
}

// BasicLoginHandler provides a mock function with given fields: _a0, _a1
func (_m *BasicAuthenticationController) BasicLoginHandler(_a0 http.ResponseWriter, _a1 *http.Request) (interface{}, httperrors.HTTPError) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	var r1 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) (interface{}, httperrors.HTTPError)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request) httperrors.HTTPError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(httperrors.HTTPError)
		}
	}

	return r0, r1
}

// Logout provides a mock function with given fields: _a0, _a1
func (_m *BasicAuthenticationController) Logout(_a0 http.ResponseWriter, _a1 *http.Request) (interface{}, httperrors.HTTPError) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	var r1 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) (interface{}, httperrors.HTTPError)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request) httperrors.HTTPError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(httperrors.HTTPError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewBasicAuthenticationController interface {
	mock.TestingT
	Cleanup(func())
}

// NewBasicAuthenticationController creates a new instance of BasicAuthenticationController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBasicAuthenticationController(t mockConstructorTestingTNewBasicAuthenticationController) *BasicAuthenticationController {
	mock := &BasicAuthenticationController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
