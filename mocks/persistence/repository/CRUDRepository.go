// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	httperrors "github.com/ditrit/badaas/httperrors"
	mock "github.com/stretchr/testify/mock"

	models "github.com/ditrit/badaas/persistence/models"

	pagination "github.com/ditrit/badaas/persistence/pagination"

	repository "github.com/ditrit/badaas/persistence/repository"

	squirrel "github.com/Masterminds/squirrel"
)

// CRUDRepository is an autogenerated mock type for the CRUDRepository type
type CRUDRepository[T models.Tabler, ID interface{}] struct {
	mock.Mock
}

// Count provides a mock function with given fields: _a0
func (_m *CRUDRepository[T, ID]) Count(_a0 squirrel.Sqlizer) (uint, httperrors.HTTPError) {
	ret := _m.Called(_a0)

	var r0 uint
	var r1 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(squirrel.Sqlizer) (uint, httperrors.HTTPError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(squirrel.Sqlizer) uint); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(squirrel.Sqlizer) httperrors.HTTPError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(httperrors.HTTPError)
		}
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0
func (_m *CRUDRepository[T, ID]) Create(_a0 *T) httperrors.HTTPError {
	ret := _m.Called(_a0)

	var r0 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(*T) httperrors.HTTPError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(httperrors.HTTPError)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *CRUDRepository[T, ID]) Delete(_a0 *T) httperrors.HTTPError {
	ret := _m.Called(_a0)

	var r0 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(*T) httperrors.HTTPError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(httperrors.HTTPError)
		}
	}

	return r0
}

// Find provides a mock function with given fields: _a0, _a1, _a2
func (_m *CRUDRepository[T, ID]) Find(_a0 squirrel.Sqlizer, _a1 pagination.Paginator, _a2 repository.SortOption) (*pagination.Page[T], httperrors.HTTPError) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *pagination.Page[T]
	var r1 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(squirrel.Sqlizer, pagination.Paginator, repository.SortOption) (*pagination.Page[T], httperrors.HTTPError)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(squirrel.Sqlizer, pagination.Paginator, repository.SortOption) *pagination.Page[T]); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Page[T])
		}
	}

	if rf, ok := ret.Get(1).(func(squirrel.Sqlizer, pagination.Paginator, repository.SortOption) httperrors.HTTPError); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(httperrors.HTTPError)
		}
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0
func (_m *CRUDRepository[T, ID]) GetAll(_a0 repository.SortOption) ([]*T, httperrors.HTTPError) {
	ret := _m.Called(_a0)

	var r0 []*T
	var r1 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(repository.SortOption) ([]*T, httperrors.HTTPError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(repository.SortOption) []*T); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.SortOption) httperrors.HTTPError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(httperrors.HTTPError)
		}
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0
func (_m *CRUDRepository[T, ID]) GetByID(_a0 ID) (*T, httperrors.HTTPError) {
	ret := _m.Called(_a0)

	var r0 *T
	var r1 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(ID) (*T, httperrors.HTTPError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(ID) *T); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(ID) httperrors.HTTPError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(httperrors.HTTPError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *CRUDRepository[T, ID]) Save(_a0 *T) httperrors.HTTPError {
	ret := _m.Called(_a0)

	var r0 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(*T) httperrors.HTTPError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(httperrors.HTTPError)
		}
	}

	return r0
}

// Transaction provides a mock function with given fields: fn
func (_m *CRUDRepository[T, ID]) Transaction(fn func(repository.CRUDRepository[T, ID]) (interface{}, error)) (interface{}, httperrors.HTTPError) {
	ret := _m.Called(fn)

	var r0 interface{}
	var r1 httperrors.HTTPError
	if rf, ok := ret.Get(0).(func(func(repository.CRUDRepository[T, ID]) (interface{}, error)) (interface{}, httperrors.HTTPError)); ok {
		return rf(fn)
	}
	if rf, ok := ret.Get(0).(func(func(repository.CRUDRepository[T, ID]) (interface{}, error)) interface{}); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(func(repository.CRUDRepository[T, ID]) (interface{}, error)) httperrors.HTTPError); ok {
		r1 = rf(fn)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(httperrors.HTTPError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewCRUDRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCRUDRepository creates a new instance of CRUDRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCRUDRepository[T models.Tabler, ID interface{}](t mockConstructorTestingTNewCRUDRepository) *CRUDRepository[T, ID] {
	mock := &CRUDRepository[T, ID]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
