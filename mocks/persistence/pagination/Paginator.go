// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Paginator is an autogenerated mock type for the Paginator type
type Paginator struct {
	mock.Mock
}

// Limit provides a mock function with given fields:
func (_m *Paginator) Limit() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Offset provides a mock function with given fields:
func (_m *Paginator) Offset() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

type mockConstructorTestingTNewPaginator interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaginator creates a new instance of Paginator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaginator(t mockConstructorTestingTNewPaginator) *Paginator {
	mock := &Paginator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
