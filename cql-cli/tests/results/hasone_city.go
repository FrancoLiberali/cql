// Code generated by cql-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	hasone "github.com/FrancoLiberali/cql/cql-cli/cmd/gen/conditions/tests/hasone"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

func (cityConditions cityConditions) Country(conditions ...condition.Condition[hasone.Country]) condition.JoinCondition[hasone.City] {
	return condition.NewJoinCondition[hasone.City, hasone.Country](conditions, "Country", "CountryID", cityConditions.Preload(), "ID")
}
func (cityConditions cityConditions) PreloadCountry() condition.JoinCondition[hasone.City] {
	return cityConditions.Country(Country.Preload())
}

type cityConditions struct {
	ID        condition.Field[hasone.City, model.UUID]
	CreatedAt condition.Field[hasone.City, time.Time]
	UpdatedAt condition.Field[hasone.City, time.Time]
	DeletedAt condition.Field[hasone.City, time.Time]
	CountryID condition.UpdatableField[hasone.City, model.UUID]
}

var City = cityConditions{
	CountryID: condition.UpdatableField[hasone.City, model.UUID]{Field: condition.Field[hasone.City, model.UUID]{Name: "CountryID"}},
	CreatedAt: condition.Field[hasone.City, time.Time]{Name: "CreatedAt"},
	DeletedAt: condition.Field[hasone.City, time.Time]{Name: "DeletedAt"},
	ID:        condition.Field[hasone.City, model.UUID]{Name: "ID"},
	UpdatedAt: condition.Field[hasone.City, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the City when doing a query
func (cityConditions cityConditions) Preload() condition.Condition[hasone.City] {
	return condition.NewPreloadCondition[hasone.City](cityConditions.ID, cityConditions.CreatedAt, cityConditions.UpdatedAt, cityConditions.DeletedAt, cityConditions.CountryID)
}

// PreloadRelations allows preloading all the City's relation when doing a query
func (cityConditions cityConditions) PreloadRelations() []condition.Condition[hasone.City] {
	return []condition.Condition[hasone.City]{cityConditions.PreloadCountry()}
}
