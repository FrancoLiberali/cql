// Code generated by cql-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	overridereferencesinverse "github.com/FrancoLiberali/cql/cql-cli/cmd/gen/conditions/tests/overridereferencesinverse"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

func (computerConditions computerConditions) Processor(conditions ...condition.Condition[overridereferencesinverse.Processor]) condition.JoinCondition[overridereferencesinverse.Computer] {
	return condition.NewJoinCondition[overridereferencesinverse.Computer, overridereferencesinverse.Processor](conditions, "Processor", "Name", computerConditions.Preload(), "ComputerName")
}
func (computerConditions computerConditions) PreloadProcessor() condition.JoinCondition[overridereferencesinverse.Computer] {
	return computerConditions.Processor(Processor.Preload())
}

type computerConditions struct {
	ID        condition.Field[overridereferencesinverse.Computer, model.UUID]
	CreatedAt condition.Field[overridereferencesinverse.Computer, time.Time]
	UpdatedAt condition.Field[overridereferencesinverse.Computer, time.Time]
	DeletedAt condition.Field[overridereferencesinverse.Computer, time.Time]
	Name      condition.StringField[overridereferencesinverse.Computer]
}

var Computer = computerConditions{
	CreatedAt: condition.Field[overridereferencesinverse.Computer, time.Time]{Name: "CreatedAt"},
	DeletedAt: condition.Field[overridereferencesinverse.Computer, time.Time]{Name: "DeletedAt"},
	ID:        condition.Field[overridereferencesinverse.Computer, model.UUID]{Name: "ID"},
	Name:      condition.StringField[overridereferencesinverse.Computer]{UpdatableField: condition.UpdatableField[overridereferencesinverse.Computer, string]{Field: condition.Field[overridereferencesinverse.Computer, string]{Name: "Name"}}},
	UpdatedAt: condition.Field[overridereferencesinverse.Computer, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Computer when doing a query
func (computerConditions computerConditions) Preload() condition.Condition[overridereferencesinverse.Computer] {
	return condition.NewPreloadCondition[overridereferencesinverse.Computer](computerConditions.ID, computerConditions.CreatedAt, computerConditions.UpdatedAt, computerConditions.DeletedAt, computerConditions.Name)
}

// PreloadRelations allows preloading all the Computer's relation when doing a query
func (computerConditions computerConditions) PreloadRelations() []condition.Condition[overridereferencesinverse.Computer] {
	return []condition.Condition[overridereferencesinverse.Computer]{computerConditions.PreloadProcessor()}
}
