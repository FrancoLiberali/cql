// Code generated by cql-gen v0.0.6, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	models "github.com/FrancoLiberali/cql/test/models"
	"time"
)

type productConditions struct {
	ID                      condition.Field[models.Product, model.UUID]
	CreatedAt               condition.Field[models.Product, time.Time]
	UpdatedAt               condition.Field[models.Product, time.Time]
	DeletedAt               condition.Field[models.Product, time.Time]
	String                  condition.StringField[models.Product]
	Int                     condition.UpdatableField[models.Product, int]
	IntPointer              condition.NullableField[models.Product, int]
	Float                   condition.UpdatableField[models.Product, float64]
	NullFloat               condition.NullableField[models.Product, float64]
	Bool                    condition.BoolField[models.Product]
	NullBool                condition.NullableBoolField[models.Product]
	ByteArray               condition.UpdatableField[models.Product, []uint8]
	MultiString             condition.UpdatableField[models.Product, models.MultiString]
	ToBeEmbeddedEmbeddedInt condition.UpdatableField[models.Product, int]
	GormEmbeddedInt         condition.UpdatableField[models.Product, int]
}

var Product = productConditions{
	Bool:      condition.BoolField[models.Product]{UpdatableField: condition.UpdatableField[models.Product, bool]{Field: condition.Field[models.Product, bool]{Name: "Bool"}}},
	ByteArray: condition.UpdatableField[models.Product, []uint8]{Field: condition.Field[models.Product, []uint8]{Name: "ByteArray"}},
	CreatedAt: condition.Field[models.Product, time.Time]{Name: "CreatedAt"},
	DeletedAt: condition.Field[models.Product, time.Time]{Name: "DeletedAt"},
	Float:     condition.UpdatableField[models.Product, float64]{Field: condition.Field[models.Product, float64]{Name: "Float"}},
	GormEmbeddedInt: condition.UpdatableField[models.Product, int]{Field: condition.Field[models.Product, int]{
		ColumnPrefix: "gorm_embedded_",
		Name:         "Int",
	}},
	ID:          condition.Field[models.Product, model.UUID]{Name: "ID"},
	Int:         condition.UpdatableField[models.Product, int]{Field: condition.Field[models.Product, int]{Name: "Int"}},
	IntPointer:  condition.NullableField[models.Product, int]{UpdatableField: condition.UpdatableField[models.Product, int]{Field: condition.Field[models.Product, int]{Name: "IntPointer"}}},
	MultiString: condition.UpdatableField[models.Product, models.MultiString]{Field: condition.Field[models.Product, models.MultiString]{Name: "MultiString"}},
	NullBool:    condition.NullableBoolField[models.Product]{NullableField: condition.NullableField[models.Product, bool]{UpdatableField: condition.UpdatableField[models.Product, bool]{Field: condition.Field[models.Product, bool]{Name: "NullBool"}}}},
	NullFloat:   condition.NullableField[models.Product, float64]{UpdatableField: condition.UpdatableField[models.Product, float64]{Field: condition.Field[models.Product, float64]{Name: "NullFloat"}}},
	String: condition.StringField[models.Product]{UpdatableField: condition.UpdatableField[models.Product, string]{Field: condition.Field[models.Product, string]{
		Column: "string_something_else",
		Name:   "String",
	}}},
	ToBeEmbeddedEmbeddedInt: condition.UpdatableField[models.Product, int]{Field: condition.Field[models.Product, int]{Name: "EmbeddedInt"}},
	UpdatedAt:               condition.Field[models.Product, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Product when doing a query
func (productConditions productConditions) preload() condition.Condition[models.Product] {
	return condition.NewPreloadCondition[models.Product](productConditions.ID, productConditions.CreatedAt, productConditions.UpdatedAt, productConditions.DeletedAt, productConditions.String, productConditions.Int, productConditions.IntPointer, productConditions.Float, productConditions.NullFloat, productConditions.Bool, productConditions.NullBool, productConditions.ByteArray, productConditions.MultiString, productConditions.ToBeEmbeddedEmbeddedInt, productConditions.GormEmbeddedInt)
}
