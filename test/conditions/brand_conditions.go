// Code generated by cql-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	models "github.com/FrancoLiberali/cql/test/models"
	"time"
)

type brandConditions struct {
	ID        condition.Field[models.Brand, model.UIntID]
	CreatedAt condition.Field[models.Brand, time.Time]
	UpdatedAt condition.Field[models.Brand, time.Time]
	DeletedAt condition.Field[models.Brand, time.Time]
	Name      condition.StringField[models.Brand]
}

var Brand = brandConditions{
	CreatedAt: condition.Field[models.Brand, time.Time]{Name: "CreatedAt"},
	DeletedAt: condition.Field[models.Brand, time.Time]{Name: "DeletedAt"},
	ID:        condition.Field[models.Brand, model.UIntID]{Name: "ID"},
	Name:      condition.StringField[models.Brand]{UpdatableField: condition.UpdatableField[models.Brand, string]{Field: condition.Field[models.Brand, string]{Name: "Name"}}},
	UpdatedAt: condition.Field[models.Brand, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Brand when doing a query
func (brandConditions brandConditions) Preload() condition.Condition[models.Brand] {
	return condition.NewPreloadCondition[models.Brand](brandConditions.ID, brandConditions.CreatedAt, brandConditions.UpdatedAt, brandConditions.DeletedAt, brandConditions.Name)
}
