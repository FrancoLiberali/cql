// Code generated by cql-gen v0.0.6, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	models "github.com/FrancoLiberali/cql/test/models"
	"time"
)

func (saleConditions saleConditions) Product(conditions ...condition.Condition[models.Product]) condition.JoinCondition[models.Sale] {
	return condition.NewJoinCondition[models.Sale, models.Product](conditions, "Product", "ProductID", saleConditions.preload(), "ID", Product.preload())
}
func (saleConditions saleConditions) Seller(conditions ...condition.Condition[models.Seller]) condition.JoinCondition[models.Sale] {
	return condition.NewJoinCondition[models.Sale, models.Seller](conditions, "Seller", "SellerID", saleConditions.preload(), "ID", Seller.preload())
}

type saleConditions struct {
	ID          condition.Field[models.Sale, model.UUID]
	CreatedAt   condition.Field[models.Sale, time.Time]
	UpdatedAt   condition.Field[models.Sale, time.Time]
	DeletedAt   condition.Field[models.Sale, time.Time]
	Code        condition.UpdatableField[models.Sale, int]
	Description condition.StringField[models.Sale]
	ProductID   condition.UpdatableField[models.Sale, model.UUID]
	SellerID    condition.NullableField[models.Sale, model.UUID]
}

var Sale = saleConditions{
	Code:        condition.UpdatableField[models.Sale, int]{Field: condition.Field[models.Sale, int]{Name: "Code"}},
	CreatedAt:   condition.Field[models.Sale, time.Time]{Name: "CreatedAt"},
	DeletedAt:   condition.Field[models.Sale, time.Time]{Name: "DeletedAt"},
	Description: condition.StringField[models.Sale]{UpdatableField: condition.UpdatableField[models.Sale, string]{Field: condition.Field[models.Sale, string]{Name: "Description"}}},
	ID:          condition.Field[models.Sale, model.UUID]{Name: "ID"},
	ProductID:   condition.UpdatableField[models.Sale, model.UUID]{Field: condition.Field[models.Sale, model.UUID]{Name: "ProductID"}},
	SellerID:    condition.NullableField[models.Sale, model.UUID]{UpdatableField: condition.UpdatableField[models.Sale, model.UUID]{Field: condition.Field[models.Sale, model.UUID]{Name: "SellerID"}}},
	UpdatedAt:   condition.Field[models.Sale, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Sale when doing a query
func (saleConditions saleConditions) preload() condition.Condition[models.Sale] {
	return condition.NewPreloadCondition[models.Sale](saleConditions.ID, saleConditions.CreatedAt, saleConditions.UpdatedAt, saleConditions.DeletedAt, saleConditions.Code, saleConditions.Description, saleConditions.ProductID, saleConditions.SellerID)
}
