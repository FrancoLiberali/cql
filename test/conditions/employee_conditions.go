// Code generated by cql-gen v0.0.5, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	models "github.com/FrancoLiberali/cql/test/models"
	"time"
)

func (employeeConditions employeeConditions) Boss(conditions ...condition.Condition[models.Employee]) condition.JoinCondition[models.Employee] {
	return condition.NewJoinCondition[models.Employee, models.Employee](conditions, "Boss", "BossID", employeeConditions.preload(), "ID", Employee.preload())
}

type employeeConditions struct {
	ID        condition.Field[models.Employee, model.UUID]
	CreatedAt condition.Field[models.Employee, time.Time]
	UpdatedAt condition.Field[models.Employee, time.Time]
	DeletedAt condition.Field[models.Employee, time.Time]
	Name      condition.StringField[models.Employee]
	BossID    condition.NullableField[models.Employee, model.UUID]
}

var Employee = employeeConditions{
	BossID:    condition.NullableField[models.Employee, model.UUID]{UpdatableField: condition.UpdatableField[models.Employee, model.UUID]{Field: condition.Field[models.Employee, model.UUID]{Name: "BossID"}}},
	CreatedAt: condition.Field[models.Employee, time.Time]{Name: "CreatedAt"},
	DeletedAt: condition.Field[models.Employee, time.Time]{Name: "DeletedAt"},
	ID:        condition.Field[models.Employee, model.UUID]{Name: "ID"},
	Name:      condition.StringField[models.Employee]{UpdatableField: condition.UpdatableField[models.Employee, string]{Field: condition.Field[models.Employee, string]{Name: "Name"}}},
	UpdatedAt: condition.Field[models.Employee, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Employee when doing a query
func (employeeConditions employeeConditions) preload() condition.Condition[models.Employee] {
	return condition.NewPreloadCondition[models.Employee](employeeConditions.ID, employeeConditions.CreatedAt, employeeConditions.UpdatedAt, employeeConditions.DeletedAt, employeeConditions.Name, employeeConditions.BossID)
}
