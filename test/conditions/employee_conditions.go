// Code generated by cql-gen v0.1.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	models "github.com/FrancoLiberali/cql/test/models"
	"time"
)

func (employeeConditions employeeConditions) Boss(conditions ...condition.Condition[models.Employee]) condition.JoinCondition[models.Employee] {
	return condition.NewJoinCondition[models.Employee, models.Employee](conditions, "Boss", "BossID", employeeConditions.preload(), "ID", Employee.preload())
}

type employeeConditions struct {
	ID        condition.Field[models.Employee, model.UUID]
	CreatedAt condition.Field[models.Employee, time.Time]
	UpdatedAt condition.Field[models.Employee, time.Time]
	DeletedAt condition.Field[models.Employee, time.Time]
	Name      condition.StringField[models.Employee]
	BossID    condition.NullableField[models.Employee, model.UUID]
}

var Employee = employeeConditions{
	BossID:    condition.NewNullableField[models.Employee, model.UUID]("BossID", "", ""),
	CreatedAt: condition.NewField[models.Employee, time.Time]("CreatedAt", "", ""),
	DeletedAt: condition.NewField[models.Employee, time.Time]("DeletedAt", "", ""),
	ID:        condition.NewField[models.Employee, model.UUID]("ID", "", ""),
	Name:      condition.NewStringField[models.Employee]("Name", "", ""),
	UpdatedAt: condition.NewField[models.Employee, time.Time]("UpdatedAt", "", ""),
}

// Preload allows preloading the Employee when doing a query
func (employeeConditions employeeConditions) preload() condition.Condition[models.Employee] {
	return condition.NewPreloadCondition[models.Employee](employeeConditions.ID, employeeConditions.CreatedAt, employeeConditions.UpdatedAt, employeeConditions.DeletedAt, employeeConditions.Name, employeeConditions.BossID)
}
