// Code generated by cql-gen v0.0.6, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	models "github.com/FrancoLiberali/cql/test/models"
	"time"
)

func (phoneConditions phoneConditions) Brand(conditions ...condition.Condition[models.Brand]) condition.JoinCondition[models.Phone] {
	return condition.NewJoinCondition[models.Phone, models.Brand](conditions, "Brand", "BrandID", phoneConditions.preload(), "ID", Brand.preload())
}

type phoneConditions struct {
	ID        condition.Field[models.Phone, model.UIntID]
	CreatedAt condition.Field[models.Phone, time.Time]
	UpdatedAt condition.Field[models.Phone, time.Time]
	DeletedAt condition.Field[models.Phone, time.Time]
	Name      condition.StringField[models.Phone]
	BrandID   condition.UpdatableField[models.Phone, uint]
}

var Phone = phoneConditions{
	BrandID:   condition.NewUpdatableField[models.Phone, uint]("BrandID", "", ""),
	CreatedAt: condition.NewField[models.Phone, time.Time]("CreatedAt", "", ""),
	DeletedAt: condition.NewField[models.Phone, time.Time]("DeletedAt", "", ""),
	ID:        condition.NewField[models.Phone, model.UIntID]("ID", "", ""),
	Name:      condition.NewStringField[models.Phone]("Name", "", ""),
	UpdatedAt: condition.NewField[models.Phone, time.Time]("UpdatedAt", "", ""),
}

// Preload allows preloading the Phone when doing a query
func (phoneConditions phoneConditions) preload() condition.Condition[models.Phone] {
	return condition.NewPreloadCondition[models.Phone](phoneConditions.ID, phoneConditions.CreatedAt, phoneConditions.UpdatedAt, phoneConditions.DeletedAt, phoneConditions.Name, phoneConditions.BrandID)
}
