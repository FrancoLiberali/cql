// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var companyType = reflect.TypeOf(*new(models.Company))
var CompanyIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: companyType,
}

func CompanyId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Company] {
	return condition.NewFieldCondition[models.Company, model.UUID](CompanyIdField, operator)
}

var CompanyCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: companyType,
}

func CompanyCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Company] {
	return condition.NewFieldCondition[models.Company, time.Time](CompanyCreatedAtField, operator)
}

var CompanyUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: companyType,
}

func CompanyUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Company] {
	return condition.NewFieldCondition[models.Company, time.Time](CompanyUpdatedAtField, operator)
}

var CompanyDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: companyType,
}

func CompanyDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Company] {
	return condition.NewFieldCondition[models.Company, time.Time](CompanyDeletedAtField, operator)
}

var CompanyNameField = query.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: companyType,
}

func CompanyName(operator operator.Operator[string]) condition.WhereCondition[models.Company] {
	return condition.NewFieldCondition[models.Company, string](CompanyNameField, operator)
}
func CompanyPreloadSellers(nestedPreloads ...condition.JoinCondition[models.Seller]) condition.Condition[models.Company] {
	return condition.NewCollectionPreloadCondition[models.Company, models.Seller]("Sellers", nestedPreloads)
}

var CompanyPreloadAttributes = condition.NewPreloadCondition[models.Company](CompanyIdField, CompanyCreatedAtField, CompanyUpdatedAtField, CompanyDeletedAtField, CompanyNameField)
var CompanyPreloadRelations = []condition.Condition[models.Company]{CompanyPreloadSellers()}
