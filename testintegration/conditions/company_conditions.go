// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	orm "github.com/ditrit/badaas/orm"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var companyType = reflect.TypeOf(*new(models.Company))
var CompanyIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "ID",
	ModelType: companyType,
}

func CompanyId(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Company] {
	return orm.FieldCondition[models.Company, orm.UUID]{
		FieldIdentifier: CompanyIdField,
		Operator:        operator,
	}
}

var CompanyCreatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: companyType,
}

func CompanyCreatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Company] {
	return orm.FieldCondition[models.Company, time.Time]{
		FieldIdentifier: CompanyCreatedAtField,
		Operator:        operator,
	}
}

var CompanyUpdatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: companyType,
}

func CompanyUpdatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Company] {
	return orm.FieldCondition[models.Company, time.Time]{
		FieldIdentifier: CompanyUpdatedAtField,
		Operator:        operator,
	}
}

var CompanyDeletedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: companyType,
}

func CompanyDeletedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Company] {
	return orm.FieldCondition[models.Company, time.Time]{
		FieldIdentifier: CompanyDeletedAtField,
		Operator:        operator,
	}
}

var CompanyNameField = orm.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: companyType,
}

func CompanyName(operator orm.Operator[string]) orm.WhereCondition[models.Company] {
	return orm.FieldCondition[models.Company, string]{
		FieldIdentifier: CompanyNameField,
		Operator:        operator,
	}
}
func CompanyPreloadSellers(nestedPreloads ...orm.IJoinCondition[models.Seller]) orm.Condition[models.Company] {
	return orm.NewCollectionPreloadCondition[models.Company, models.Seller]("Sellers", nestedPreloads)
}

var CompanyPreloadAttributes = orm.NewPreloadCondition[models.Company](CompanyIdField, CompanyCreatedAtField, CompanyUpdatedAtField, CompanyDeletedAtField, CompanyNameField)
var CompanyPreloadRelations = []orm.Condition[models.Company]{CompanyPreloadSellers()}
