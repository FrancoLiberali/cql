// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var sellerType = reflect.TypeOf(*new(models.Seller))
var SellerIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: sellerType,
}

func SellerId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Seller] {
	return condition.NewFieldCondition[models.Seller, model.UUID](SellerIdField, operator)
}

var SellerCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: sellerType,
}

func SellerCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Seller] {
	return condition.NewFieldCondition[models.Seller, time.Time](SellerCreatedAtField, operator)
}

var SellerUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: sellerType,
}

func SellerUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Seller] {
	return condition.NewFieldCondition[models.Seller, time.Time](SellerUpdatedAtField, operator)
}

var SellerDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: sellerType,
}

func SellerDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Seller] {
	return condition.NewFieldCondition[models.Seller, time.Time](SellerDeletedAtField, operator)
}

var SellerNameField = query.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: sellerType,
}

func SellerName(operator operator.Operator[string]) condition.WhereCondition[models.Seller] {
	return condition.NewFieldCondition[models.Seller, string](SellerNameField, operator)
}
func SellerCompany(conditions ...condition.Condition[models.Company]) condition.JoinCondition[models.Seller] {
	return condition.NewJoinCondition[models.Seller, models.Company](conditions, "Company", "CompanyID", SellerPreloadAttributes, "ID")
}

var SellerPreloadCompany = SellerCompany(CompanyPreloadAttributes)
var SellerCompanyIdField = query.FieldIdentifier[model.UUID]{
	Field:     "CompanyID",
	ModelType: sellerType,
}

func SellerCompanyId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Seller] {
	return condition.NewFieldCondition[models.Seller, model.UUID](SellerCompanyIdField, operator)
}
func SellerUniversity(conditions ...condition.Condition[models.University]) condition.JoinCondition[models.Seller] {
	return condition.NewJoinCondition[models.Seller, models.University](conditions, "University", "UniversityID", SellerPreloadAttributes, "ID")
}

var SellerPreloadUniversity = SellerUniversity(UniversityPreloadAttributes)
var SellerUniversityIdField = query.FieldIdentifier[model.UUID]{
	Field:     "UniversityID",
	ModelType: sellerType,
}

func SellerUniversityId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Seller] {
	return condition.NewFieldCondition[models.Seller, model.UUID](SellerUniversityIdField, operator)
}

var SellerPreloadAttributes = condition.NewPreloadCondition[models.Seller](SellerIdField, SellerCreatedAtField, SellerUpdatedAtField, SellerDeletedAtField, SellerNameField, SellerCompanyIdField, SellerUniversityIdField)
var SellerPreloadRelations = []condition.Condition[models.Seller]{SellerPreloadCompany, SellerPreloadUniversity}
