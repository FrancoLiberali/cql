// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	orm "github.com/ditrit/badaas/orm"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var sellerType = reflect.TypeOf(*new(models.Seller))
var SellerIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "ID",
	ModelType: sellerType,
}

func SellerId(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Seller] {
	return orm.FieldCondition[models.Seller, orm.UUID]{
		FieldIdentifier: SellerIdField,
		Operator:        operator,
	}
}

var SellerCreatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: sellerType,
}

func SellerCreatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Seller] {
	return orm.FieldCondition[models.Seller, time.Time]{
		FieldIdentifier: SellerCreatedAtField,
		Operator:        operator,
	}
}

var SellerUpdatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: sellerType,
}

func SellerUpdatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Seller] {
	return orm.FieldCondition[models.Seller, time.Time]{
		FieldIdentifier: SellerUpdatedAtField,
		Operator:        operator,
	}
}

var SellerDeletedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: sellerType,
}

func SellerDeletedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Seller] {
	return orm.FieldCondition[models.Seller, time.Time]{
		FieldIdentifier: SellerDeletedAtField,
		Operator:        operator,
	}
}

var SellerNameField = orm.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: sellerType,
}

func SellerName(operator orm.Operator[string]) orm.WhereCondition[models.Seller] {
	return orm.FieldCondition[models.Seller, string]{
		FieldIdentifier: SellerNameField,
		Operator:        operator,
	}
}
func SellerCompany(conditions ...orm.Condition[models.Company]) orm.IJoinCondition[models.Seller] {
	return orm.JoinCondition[models.Seller, models.Company]{
		Conditions:         conditions,
		RelationField:      "Company",
		T1Field:            "CompanyID",
		T1PreloadCondition: SellerPreloadAttributes,
		T2Field:            "ID",
	}
}

var SellerPreloadCompany = SellerCompany(CompanyPreloadAttributes)
var SellerCompanyIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "CompanyID",
	ModelType: sellerType,
}

func SellerCompanyId(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Seller] {
	return orm.FieldCondition[models.Seller, orm.UUID]{
		FieldIdentifier: SellerCompanyIdField,
		Operator:        operator,
	}
}
func SellerUniversity(conditions ...orm.Condition[models.University]) orm.IJoinCondition[models.Seller] {
	return orm.JoinCondition[models.Seller, models.University]{
		Conditions:         conditions,
		RelationField:      "University",
		T1Field:            "UniversityID",
		T1PreloadCondition: SellerPreloadAttributes,
		T2Field:            "ID",
	}
}

var SellerPreloadUniversity = SellerUniversity(UniversityPreloadAttributes)
var SellerUniversityIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "UniversityID",
	ModelType: sellerType,
}

func SellerUniversityId(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Seller] {
	return orm.FieldCondition[models.Seller, orm.UUID]{
		FieldIdentifier: SellerUniversityIdField,
		Operator:        operator,
	}
}

var SellerPreloadAttributes = orm.NewPreloadCondition[models.Seller](SellerIdField, SellerCreatedAtField, SellerUpdatedAtField, SellerDeletedAtField, SellerNameField, SellerCompanyIdField, SellerUniversityIdField)
var SellerPreloadRelations = []orm.Condition[models.Seller]{SellerPreloadCompany, SellerPreloadUniversity}
