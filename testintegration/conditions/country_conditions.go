// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var countryType = reflect.TypeOf(*new(models.Country))
var CountryIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: countryType,
}

func CountryId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Country] {
	return condition.NewFieldCondition[models.Country, model.UUID](CountryIdField, operator)
}

var CountryCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: countryType,
}

func CountryCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Country] {
	return condition.NewFieldCondition[models.Country, time.Time](CountryCreatedAtField, operator)
}

var CountryUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: countryType,
}

func CountryUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Country] {
	return condition.NewFieldCondition[models.Country, time.Time](CountryUpdatedAtField, operator)
}

var CountryDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: countryType,
}

func CountryDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Country] {
	return condition.NewFieldCondition[models.Country, time.Time](CountryDeletedAtField, operator)
}

var CountryNameField = query.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: countryType,
}

func CountryName(operator operator.Operator[string]) condition.WhereCondition[models.Country] {
	return condition.NewFieldCondition[models.Country, string](CountryNameField, operator)
}
func CountryCapital(conditions ...condition.Condition[models.City]) condition.JoinCondition[models.Country] {
	return condition.NewJoinCondition[models.Country, models.City](conditions, "Capital", "ID", CountryPreloadAttributes, "CountryID")
}

var CountryPreloadCapital = CountryCapital(CityPreloadAttributes)
var CountryPreloadAttributes = condition.NewPreloadCondition[models.Country](CountryIdField, CountryCreatedAtField, CountryUpdatedAtField, CountryDeletedAtField, CountryNameField)
var CountryPreloadRelations = []condition.Condition[models.Country]{CountryPreloadCapital}
