// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	cql "github.com/ditrit/badaas/orm/cql"
	model "github.com/ditrit/badaas/orm/model"
	models "github.com/ditrit/badaas/testintegration/models"
	"time"
)

type personConditions struct {
	ID        cql.Field[models.Person, model.UUID]
	CreatedAt cql.Field[models.Person, time.Time]
	UpdatedAt cql.Field[models.Person, time.Time]
	DeletedAt cql.Field[models.Person, time.Time]
	Name      cql.StringField[models.Person]
}

var Person = personConditions{
	CreatedAt: cql.Field[models.Person, time.Time]{Name: "CreatedAt"},
	DeletedAt: cql.Field[models.Person, time.Time]{Name: "DeletedAt"},
	ID:        cql.Field[models.Person, model.UUID]{Name: "ID"},
	Name:      cql.StringField[models.Person]{Field: cql.Field[models.Person, string]{Name: "Name"}},
	UpdatedAt: cql.Field[models.Person, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Person when doing a query
func (personConditions personConditions) Preload() cql.Condition[models.Person] {
	return cql.NewPreloadCondition[models.Person](personConditions.ID, personConditions.CreatedAt, personConditions.UpdatedAt, personConditions.DeletedAt, personConditions.Name)
}
