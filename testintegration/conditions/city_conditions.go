// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var cityType = reflect.TypeOf(*new(models.City))
var CityIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: cityType,
}

func CityId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.City] {
	return condition.NewFieldCondition[models.City, model.UUID](CityIdField, operator)
}

var CityCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: cityType,
}

func CityCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.City] {
	return condition.NewFieldCondition[models.City, time.Time](CityCreatedAtField, operator)
}

var CityUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: cityType,
}

func CityUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.City] {
	return condition.NewFieldCondition[models.City, time.Time](CityUpdatedAtField, operator)
}

var CityDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: cityType,
}

func CityDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.City] {
	return condition.NewFieldCondition[models.City, time.Time](CityDeletedAtField, operator)
}

var CityNameField = query.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: cityType,
}

func CityName(operator operator.Operator[string]) condition.WhereCondition[models.City] {
	return condition.NewFieldCondition[models.City, string](CityNameField, operator)
}
func CityCountry(conditions ...condition.Condition[models.Country]) condition.JoinCondition[models.City] {
	return condition.NewJoinCondition[models.City, models.Country](conditions, "Country", "CountryID", CityPreloadAttributes, "ID")
}

var CityPreloadCountry = CityCountry(CountryPreloadAttributes)
var CityCountryIdField = query.FieldIdentifier[model.UUID]{
	Field:     "CountryID",
	ModelType: cityType,
}

func CityCountryId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.City] {
	return condition.NewFieldCondition[models.City, model.UUID](CityCountryIdField, operator)
}

var CityPreloadAttributes = condition.NewPreloadCondition[models.City](CityIdField, CityCreatedAtField, CityUpdatedAtField, CityDeletedAtField, CityNameField, CityCountryIdField)
var CityPreloadRelations = []condition.Condition[models.City]{CityPreloadCountry}
