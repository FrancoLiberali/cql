// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	orm "github.com/ditrit/badaas/orm"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var childType = reflect.TypeOf(*new(models.Child))
var ChildIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "ID",
	ModelType: childType,
}

func ChildId(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Child] {
	return orm.FieldCondition[models.Child, orm.UUID]{
		FieldIdentifier: ChildIdField,
		Operator:        operator,
	}
}

var ChildCreatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: childType,
}

func ChildCreatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Child] {
	return orm.FieldCondition[models.Child, time.Time]{
		FieldIdentifier: ChildCreatedAtField,
		Operator:        operator,
	}
}

var ChildUpdatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: childType,
}

func ChildUpdatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Child] {
	return orm.FieldCondition[models.Child, time.Time]{
		FieldIdentifier: ChildUpdatedAtField,
		Operator:        operator,
	}
}

var ChildDeletedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: childType,
}

func ChildDeletedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Child] {
	return orm.FieldCondition[models.Child, time.Time]{
		FieldIdentifier: ChildDeletedAtField,
		Operator:        operator,
	}
}

var ChildNameField = orm.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: childType,
}

func ChildName(operator orm.Operator[string]) orm.WhereCondition[models.Child] {
	return orm.FieldCondition[models.Child, string]{
		FieldIdentifier: ChildNameField,
		Operator:        operator,
	}
}

var ChildNumberField = orm.FieldIdentifier[int]{
	Field:     "Number",
	ModelType: childType,
}

func ChildNumber(operator orm.Operator[int]) orm.WhereCondition[models.Child] {
	return orm.FieldCondition[models.Child, int]{
		FieldIdentifier: ChildNumberField,
		Operator:        operator,
	}
}
func ChildParent1(conditions ...orm.Condition[models.Parent1]) orm.IJoinCondition[models.Child] {
	return orm.JoinCondition[models.Child, models.Parent1]{
		Conditions:         conditions,
		RelationField:      "Parent1",
		T1Field:            "Parent1ID",
		T1PreloadCondition: ChildPreloadAttributes,
		T2Field:            "ID",
	}
}

var ChildPreloadParent1 = ChildParent1(Parent1PreloadAttributes)
var ChildParent1IdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "Parent1ID",
	ModelType: childType,
}

func ChildParent1Id(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Child] {
	return orm.FieldCondition[models.Child, orm.UUID]{
		FieldIdentifier: ChildParent1IdField,
		Operator:        operator,
	}
}
func ChildParent2(conditions ...orm.Condition[models.Parent2]) orm.IJoinCondition[models.Child] {
	return orm.JoinCondition[models.Child, models.Parent2]{
		Conditions:         conditions,
		RelationField:      "Parent2",
		T1Field:            "Parent2ID",
		T1PreloadCondition: ChildPreloadAttributes,
		T2Field:            "ID",
	}
}

var ChildPreloadParent2 = ChildParent2(Parent2PreloadAttributes)
var ChildParent2IdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "Parent2ID",
	ModelType: childType,
}

func ChildParent2Id(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Child] {
	return orm.FieldCondition[models.Child, orm.UUID]{
		FieldIdentifier: ChildParent2IdField,
		Operator:        operator,
	}
}

var ChildPreloadAttributes = orm.NewPreloadCondition[models.Child](ChildIdField, ChildCreatedAtField, ChildUpdatedAtField, ChildDeletedAtField, ChildNameField, ChildNumberField, ChildParent1IdField, ChildParent2IdField)
var ChildPreloadRelations = []orm.Condition[models.Child]{ChildPreloadParent1, ChildPreloadParent2}
