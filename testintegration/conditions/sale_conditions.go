// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var saleType = reflect.TypeOf(*new(models.Sale))
var SaleIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: saleType,
}

func SaleId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Sale] {
	return condition.NewFieldCondition[models.Sale, model.UUID](SaleIdField, operator)
}

var SaleCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: saleType,
}

func SaleCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Sale] {
	return condition.NewFieldCondition[models.Sale, time.Time](SaleCreatedAtField, operator)
}

var SaleUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: saleType,
}

func SaleUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Sale] {
	return condition.NewFieldCondition[models.Sale, time.Time](SaleUpdatedAtField, operator)
}

var SaleDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: saleType,
}

func SaleDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Sale] {
	return condition.NewFieldCondition[models.Sale, time.Time](SaleDeletedAtField, operator)
}

var SaleCodeField = query.FieldIdentifier[int]{
	Field:     "Code",
	ModelType: saleType,
}

func SaleCode(operator operator.Operator[int]) condition.WhereCondition[models.Sale] {
	return condition.NewFieldCondition[models.Sale, int](SaleCodeField, operator)
}

var SaleDescriptionField = query.FieldIdentifier[string]{
	Field:     "Description",
	ModelType: saleType,
}

func SaleDescription(operator operator.Operator[string]) condition.WhereCondition[models.Sale] {
	return condition.NewFieldCondition[models.Sale, string](SaleDescriptionField, operator)
}
func SaleProduct(conditions ...condition.Condition[models.Product]) condition.JoinCondition[models.Sale] {
	return condition.NewJoinCondition[models.Sale, models.Product](conditions, "Product", "ProductID", SalePreloadAttributes, "ID")
}

var SalePreloadProduct = SaleProduct(ProductPreloadAttributes)
var SaleProductIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ProductID",
	ModelType: saleType,
}

func SaleProductId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Sale] {
	return condition.NewFieldCondition[models.Sale, model.UUID](SaleProductIdField, operator)
}
func SaleSeller(conditions ...condition.Condition[models.Seller]) condition.JoinCondition[models.Sale] {
	return condition.NewJoinCondition[models.Sale, models.Seller](conditions, "Seller", "SellerID", SalePreloadAttributes, "ID")
}

var SalePreloadSeller = SaleSeller(SellerPreloadAttributes)
var SaleSellerIdField = query.FieldIdentifier[model.UUID]{
	Field:     "SellerID",
	ModelType: saleType,
}

func SaleSellerId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Sale] {
	return condition.NewFieldCondition[models.Sale, model.UUID](SaleSellerIdField, operator)
}

var SalePreloadAttributes = condition.NewPreloadCondition[models.Sale](SaleIdField, SaleCreatedAtField, SaleUpdatedAtField, SaleDeletedAtField, SaleCodeField, SaleDescriptionField, SaleProductIdField, SaleSellerIdField)
var SalePreloadRelations = []condition.Condition[models.Sale]{SalePreloadProduct, SalePreloadSeller}
