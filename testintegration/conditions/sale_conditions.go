// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	cql "github.com/ditrit/badaas/orm/cql"
	model "github.com/ditrit/badaas/orm/model"
	models "github.com/ditrit/badaas/testintegration/models"
	"time"
)

func (saleConditions saleConditions) Product(conditions ...cql.Condition[models.Product]) cql.JoinCondition[models.Sale] {
	return cql.NewJoinCondition[models.Sale, models.Product](conditions, "Product", "ProductID", saleConditions.Preload(), "ID")
}
func (saleConditions saleConditions) PreloadProduct() cql.JoinCondition[models.Sale] {
	return saleConditions.Product(Product.Preload())
}
func (saleConditions saleConditions) Seller(conditions ...cql.Condition[models.Seller]) cql.JoinCondition[models.Sale] {
	return cql.NewJoinCondition[models.Sale, models.Seller](conditions, "Seller", "SellerID", saleConditions.Preload(), "ID")
}
func (saleConditions saleConditions) PreloadSeller() cql.JoinCondition[models.Sale] {
	return saleConditions.Seller(Seller.Preload())
}

type saleConditions struct {
	ID          cql.Field[models.Sale, model.UUID]
	CreatedAt   cql.Field[models.Sale, time.Time]
	UpdatedAt   cql.Field[models.Sale, time.Time]
	DeletedAt   cql.Field[models.Sale, time.Time]
	Code        cql.Field[models.Sale, int]
	Description cql.StringField[models.Sale]
	ProductID   cql.Field[models.Sale, model.UUID]
	SellerID    cql.Field[models.Sale, model.UUID]
}

var Sale = saleConditions{
	Code:        cql.Field[models.Sale, int]{Name: "Code"},
	CreatedAt:   cql.Field[models.Sale, time.Time]{Name: "CreatedAt"},
	DeletedAt:   cql.Field[models.Sale, time.Time]{Name: "DeletedAt"},
	Description: cql.StringField[models.Sale]{Field: cql.Field[models.Sale, string]{Name: "Description"}},
	ID:          cql.Field[models.Sale, model.UUID]{Name: "ID"},
	ProductID:   cql.Field[models.Sale, model.UUID]{Name: "ProductID"},
	SellerID:    cql.Field[models.Sale, model.UUID]{Name: "SellerID"},
	UpdatedAt:   cql.Field[models.Sale, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Sale when doing a query
func (saleConditions saleConditions) Preload() cql.Condition[models.Sale] {
	return cql.NewPreloadCondition[models.Sale](saleConditions.ID, saleConditions.CreatedAt, saleConditions.UpdatedAt, saleConditions.DeletedAt, saleConditions.Code, saleConditions.Description, saleConditions.ProductID, saleConditions.SellerID)
}

// PreloadRelations allows preloading all the Sale's relation when doing a query
func (saleConditions saleConditions) PreloadRelations() []cql.Condition[models.Sale] {
	return []cql.Condition[models.Sale]{saleConditions.PreloadProduct(), saleConditions.PreloadSeller()}
}
