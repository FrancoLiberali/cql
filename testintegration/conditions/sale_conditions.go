// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	orm "github.com/ditrit/badaas/orm"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var saleType = reflect.TypeOf(*new(models.Sale))
var SaleIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "ID",
	ModelType: saleType,
}

func SaleId(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Sale] {
	return orm.FieldCondition[models.Sale, orm.UUID]{
		FieldIdentifier: SaleIdField,
		Operator:        operator,
	}
}

var SaleCreatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: saleType,
}

func SaleCreatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Sale] {
	return orm.FieldCondition[models.Sale, time.Time]{
		FieldIdentifier: SaleCreatedAtField,
		Operator:        operator,
	}
}

var SaleUpdatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: saleType,
}

func SaleUpdatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Sale] {
	return orm.FieldCondition[models.Sale, time.Time]{
		FieldIdentifier: SaleUpdatedAtField,
		Operator:        operator,
	}
}

var SaleDeletedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: saleType,
}

func SaleDeletedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Sale] {
	return orm.FieldCondition[models.Sale, time.Time]{
		FieldIdentifier: SaleDeletedAtField,
		Operator:        operator,
	}
}

var SaleCodeField = orm.FieldIdentifier[int]{
	Field:     "Code",
	ModelType: saleType,
}

func SaleCode(operator orm.Operator[int]) orm.WhereCondition[models.Sale] {
	return orm.FieldCondition[models.Sale, int]{
		FieldIdentifier: SaleCodeField,
		Operator:        operator,
	}
}

var SaleDescriptionField = orm.FieldIdentifier[string]{
	Field:     "Description",
	ModelType: saleType,
}

func SaleDescription(operator orm.Operator[string]) orm.WhereCondition[models.Sale] {
	return orm.FieldCondition[models.Sale, string]{
		FieldIdentifier: SaleDescriptionField,
		Operator:        operator,
	}
}
func SaleProduct(conditions ...orm.Condition[models.Product]) orm.IJoinCondition[models.Sale] {
	return orm.JoinCondition[models.Sale, models.Product]{
		Conditions:         conditions,
		RelationField:      "Product",
		T1Field:            "ProductID",
		T1PreloadCondition: SalePreloadAttributes,
		T2Field:            "ID",
	}
}

var SalePreloadProduct = SaleProduct(ProductPreloadAttributes)
var SaleProductIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "ProductID",
	ModelType: saleType,
}

func SaleProductId(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Sale] {
	return orm.FieldCondition[models.Sale, orm.UUID]{
		FieldIdentifier: SaleProductIdField,
		Operator:        operator,
	}
}
func SaleSeller(conditions ...orm.Condition[models.Seller]) orm.IJoinCondition[models.Sale] {
	return orm.JoinCondition[models.Sale, models.Seller]{
		Conditions:         conditions,
		RelationField:      "Seller",
		T1Field:            "SellerID",
		T1PreloadCondition: SalePreloadAttributes,
		T2Field:            "ID",
	}
}

var SalePreloadSeller = SaleSeller(SellerPreloadAttributes)
var SaleSellerIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "SellerID",
	ModelType: saleType,
}

func SaleSellerId(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Sale] {
	return orm.FieldCondition[models.Sale, orm.UUID]{
		FieldIdentifier: SaleSellerIdField,
		Operator:        operator,
	}
}

var SalePreloadAttributes = orm.NewPreloadCondition[models.Sale](SaleIdField, SaleCreatedAtField, SaleUpdatedAtField, SaleDeletedAtField, SaleCodeField, SaleDescriptionField, SaleProductIdField, SaleSellerIdField)
var SalePreloadRelations = []orm.Condition[models.Sale]{SalePreloadProduct, SalePreloadSeller}
