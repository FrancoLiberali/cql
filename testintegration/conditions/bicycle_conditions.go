// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	cql "github.com/ditrit/badaas/orm/cql"
	model "github.com/ditrit/badaas/orm/model"
	models "github.com/ditrit/badaas/testintegration/models"
	"time"
)

func (bicycleConditions bicycleConditions) Owner(conditions ...cql.Condition[models.Person]) cql.JoinCondition[models.Bicycle] {
	return cql.NewJoinCondition[models.Bicycle, models.Person](conditions, "Owner", "OwnerName", bicycleConditions.Preload(), "Name")
}
func (bicycleConditions bicycleConditions) PreloadOwner() cql.JoinCondition[models.Bicycle] {
	return bicycleConditions.Owner(Person.Preload())
}

type bicycleConditions struct {
	ID        cql.Field[models.Bicycle, model.UUID]
	CreatedAt cql.Field[models.Bicycle, time.Time]
	UpdatedAt cql.Field[models.Bicycle, time.Time]
	DeletedAt cql.Field[models.Bicycle, time.Time]
	Name      cql.StringField[models.Bicycle]
	OwnerName cql.StringField[models.Bicycle]
}

var Bicycle = bicycleConditions{
	CreatedAt: cql.Field[models.Bicycle, time.Time]{Name: "CreatedAt"},
	DeletedAt: cql.Field[models.Bicycle, time.Time]{Name: "DeletedAt"},
	ID:        cql.Field[models.Bicycle, model.UUID]{Name: "ID"},
	Name:      cql.StringField[models.Bicycle]{Field: cql.Field[models.Bicycle, string]{Name: "Name"}},
	OwnerName: cql.StringField[models.Bicycle]{Field: cql.Field[models.Bicycle, string]{Name: "OwnerName"}},
	UpdatedAt: cql.Field[models.Bicycle, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Bicycle when doing a query
func (bicycleConditions bicycleConditions) Preload() cql.Condition[models.Bicycle] {
	return cql.NewPreloadCondition[models.Bicycle](bicycleConditions.ID, bicycleConditions.CreatedAt, bicycleConditions.UpdatedAt, bicycleConditions.DeletedAt, bicycleConditions.Name, bicycleConditions.OwnerName)
}

// PreloadRelations allows preloading all the Bicycle's relation when doing a query
func (bicycleConditions bicycleConditions) PreloadRelations() []cql.Condition[models.Bicycle] {
	return []cql.Condition[models.Bicycle]{bicycleConditions.PreloadOwner()}
}
