// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var bicycleType = reflect.TypeOf(*new(models.Bicycle))
var BicycleIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: bicycleType,
}

func BicycleId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Bicycle] {
	return condition.NewFieldCondition[models.Bicycle, model.UUID](BicycleIdField, operator)
}

var BicycleCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: bicycleType,
}

func BicycleCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Bicycle] {
	return condition.NewFieldCondition[models.Bicycle, time.Time](BicycleCreatedAtField, operator)
}

var BicycleUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: bicycleType,
}

func BicycleUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Bicycle] {
	return condition.NewFieldCondition[models.Bicycle, time.Time](BicycleUpdatedAtField, operator)
}

var BicycleDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: bicycleType,
}

func BicycleDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Bicycle] {
	return condition.NewFieldCondition[models.Bicycle, time.Time](BicycleDeletedAtField, operator)
}

var BicycleNameField = query.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: bicycleType,
}

func BicycleName(operator operator.Operator[string]) condition.WhereCondition[models.Bicycle] {
	return condition.NewFieldCondition[models.Bicycle, string](BicycleNameField, operator)
}
func BicycleOwner(conditions ...condition.Condition[models.Person]) condition.JoinCondition[models.Bicycle] {
	return condition.NewJoinCondition[models.Bicycle, models.Person](conditions, "Owner", "OwnerName", BicyclePreloadAttributes, "Name")
}

var BicyclePreloadOwner = BicycleOwner(PersonPreloadAttributes)
var BicycleOwnerNameField = query.FieldIdentifier[string]{
	Field:     "OwnerName",
	ModelType: bicycleType,
}

func BicycleOwnerName(operator operator.Operator[string]) condition.WhereCondition[models.Bicycle] {
	return condition.NewFieldCondition[models.Bicycle, string](BicycleOwnerNameField, operator)
}

var BicyclePreloadAttributes = condition.NewPreloadCondition[models.Bicycle](BicycleIdField, BicycleCreatedAtField, BicycleUpdatedAtField, BicycleDeletedAtField, BicycleNameField, BicycleOwnerNameField)
var BicyclePreloadRelations = []condition.Condition[models.Bicycle]{BicyclePreloadOwner}
