// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var productType = reflect.TypeOf(*new(models.Product))
var ProductIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: productType,
}

func ProductId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, model.UUID](ProductIdField, operator)
}

var ProductCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: productType,
}

func ProductCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, time.Time](ProductCreatedAtField, operator)
}

var ProductUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: productType,
}

func ProductUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, time.Time](ProductUpdatedAtField, operator)
}

var ProductDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: productType,
}

func ProductDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, time.Time](ProductDeletedAtField, operator)
}

var ProductStringField = query.FieldIdentifier[string]{
	Column:    "string_something_else",
	Field:     "String",
	ModelType: productType,
}

func ProductString(operator operator.Operator[string]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, string](ProductStringField, operator)
}

var ProductIntField = query.FieldIdentifier[int]{
	Field:     "Int",
	ModelType: productType,
}

func ProductInt(operator operator.Operator[int]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, int](ProductIntField, operator)
}

var ProductIntPointerField = query.FieldIdentifier[int]{
	Field:     "IntPointer",
	ModelType: productType,
}

func ProductIntPointer(operator operator.Operator[int]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, int](ProductIntPointerField, operator)
}

var ProductFloatField = query.FieldIdentifier[float64]{
	Field:     "Float",
	ModelType: productType,
}

func ProductFloat(operator operator.Operator[float64]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, float64](ProductFloatField, operator)
}

var ProductNullFloatField = query.FieldIdentifier[float64]{
	Field:     "NullFloat",
	ModelType: productType,
}

func ProductNullFloat(operator operator.Operator[float64]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, float64](ProductNullFloatField, operator)
}

var ProductBoolField = query.FieldIdentifier[bool]{
	Field:     "Bool",
	ModelType: productType,
}

func ProductBool(operator operator.Operator[bool]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, bool](ProductBoolField, operator)
}

var ProductNullBoolField = query.FieldIdentifier[bool]{
	Field:     "NullBool",
	ModelType: productType,
}

func ProductNullBool(operator operator.Operator[bool]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, bool](ProductNullBoolField, operator)
}

var ProductByteArrayField = query.FieldIdentifier[[]uint8]{
	Field:     "ByteArray",
	ModelType: productType,
}

func ProductByteArray(operator operator.Operator[[]uint8]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, []uint8](ProductByteArrayField, operator)
}

var ProductMultiStringField = query.FieldIdentifier[models.MultiString]{
	Field:     "MultiString",
	ModelType: productType,
}

func ProductMultiString(operator operator.Operator[models.MultiString]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, models.MultiString](ProductMultiStringField, operator)
}

var ProductToBeEmbeddedEmbeddedIntField = query.FieldIdentifier[int]{
	Field:     "EmbeddedInt",
	ModelType: productType,
}

func ProductToBeEmbeddedEmbeddedInt(operator operator.Operator[int]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, int](ProductToBeEmbeddedEmbeddedIntField, operator)
}

var ProductGormEmbeddedIntField = query.FieldIdentifier[int]{
	ColumnPrefix: "gorm_embedded_",
	Field:        "Int",
	ModelType:    productType,
}

func ProductGormEmbeddedInt(operator operator.Operator[int]) condition.WhereCondition[models.Product] {
	return condition.NewFieldCondition[models.Product, int](ProductGormEmbeddedIntField, operator)
}

var ProductPreloadAttributes = condition.NewPreloadCondition[models.Product](ProductIdField, ProductCreatedAtField, ProductUpdatedAtField, ProductDeletedAtField, ProductStringField, ProductIntField, ProductIntPointerField, ProductFloatField, ProductNullFloatField, ProductBoolField, ProductNullBoolField, ProductByteArrayField, ProductMultiStringField, ProductToBeEmbeddedEmbeddedIntField, ProductGormEmbeddedIntField)
