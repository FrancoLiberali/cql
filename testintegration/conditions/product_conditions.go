// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	orm "github.com/ditrit/badaas/orm"
	models "github.com/ditrit/badaas/testintegration/models"
	"time"
)

func ProductId(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, orm.UUID]{
		FieldIdentifier: orm.IDFieldID,
		Operator:        operator,
	}
}
func ProductCreatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, time.Time]{
		FieldIdentifier: orm.CreatedAtFieldID,
		Operator:        operator,
	}
}
func ProductUpdatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, time.Time]{
		FieldIdentifier: orm.UpdatedAtFieldID,
		Operator:        operator,
	}
}
func ProductDeletedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, time.Time]{
		FieldIdentifier: orm.DeletedAtFieldID,
		Operator:        operator,
	}
}

var productStringFieldID = orm.FieldIdentifier{Column: "string_something_else"}

func ProductString(operator orm.Operator[string]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, string]{
		FieldIdentifier: productStringFieldID,
		Operator:        operator,
	}
}

var productIntFieldID = orm.FieldIdentifier{Field: "Int"}

func ProductInt(operator orm.Operator[int]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, int]{
		FieldIdentifier: productIntFieldID,
		Operator:        operator,
	}
}

var productIntPointerFieldID = orm.FieldIdentifier{Field: "IntPointer"}

func ProductIntPointer(operator orm.Operator[int]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, int]{
		FieldIdentifier: productIntPointerFieldID,
		Operator:        operator,
	}
}

var productFloatFieldID = orm.FieldIdentifier{Field: "Float"}

func ProductFloat(operator orm.Operator[float64]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, float64]{
		FieldIdentifier: productFloatFieldID,
		Operator:        operator,
	}
}

var productNullFloatFieldID = orm.FieldIdentifier{Field: "NullFloat"}

func ProductNullFloat(operator orm.Operator[float64]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, float64]{
		FieldIdentifier: productNullFloatFieldID,
		Operator:        operator,
	}
}

var productBoolFieldID = orm.FieldIdentifier{Field: "Bool"}

func ProductBool(operator orm.Operator[bool]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, bool]{
		FieldIdentifier: productBoolFieldID,
		Operator:        operator,
	}
}

var productNullBoolFieldID = orm.FieldIdentifier{Field: "NullBool"}

func ProductNullBool(operator orm.Operator[bool]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, bool]{
		FieldIdentifier: productNullBoolFieldID,
		Operator:        operator,
	}
}

var productByteArrayFieldID = orm.FieldIdentifier{Field: "ByteArray"}

func ProductByteArray(operator orm.Operator[[]uint8]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, []uint8]{
		FieldIdentifier: productByteArrayFieldID,
		Operator:        operator,
	}
}

var productMultiStringFieldID = orm.FieldIdentifier{Field: "MultiString"}

func ProductMultiString(operator orm.Operator[models.MultiString]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, models.MultiString]{
		FieldIdentifier: productMultiStringFieldID,
		Operator:        operator,
	}
}

var productToBeEmbeddedEmbeddedIntFieldID = orm.FieldIdentifier{Field: "EmbeddedInt"}

func ProductToBeEmbeddedEmbeddedInt(operator orm.Operator[int]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, int]{
		FieldIdentifier: productToBeEmbeddedEmbeddedIntFieldID,
		Operator:        operator,
	}
}

var productGormEmbeddedIntFieldID = orm.FieldIdentifier{
	ColumnPrefix: "gorm_embedded_",
	Field:        "Int",
}

func ProductGormEmbeddedInt(operator orm.Operator[int]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, int]{
		FieldIdentifier: productGormEmbeddedIntFieldID,
		Operator:        operator,
	}
}

var ProductPreloadAttributes = orm.NewPreloadCondition[models.Product](productStringFieldID, productIntFieldID, productIntPointerFieldID, productFloatFieldID, productNullFloatFieldID, productBoolFieldID, productNullBoolFieldID, productByteArrayFieldID, productMultiStringFieldID, productToBeEmbeddedEmbeddedIntFieldID, productGormEmbeddedIntFieldID)
