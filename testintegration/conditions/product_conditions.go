// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	orm "github.com/ditrit/badaas/orm"
	models "github.com/ditrit/badaas/testintegration/models"
	"time"
)

func ProductId(operator orm.Operator[orm.UUID]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, orm.UUID]{
		Field:    "ID",
		Operator: operator,
	}
}
func ProductCreatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, time.Time]{
		Field:    "CreatedAt",
		Operator: operator,
	}
}
func ProductUpdatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, time.Time]{
		Field:    "UpdatedAt",
		Operator: operator,
	}
}
func ProductDeletedAt(operator orm.Operator[time.Time]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, time.Time]{
		Field:    "DeletedAt",
		Operator: operator,
	}
}
func ProductString(operator orm.Operator[string]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, string]{
		Column:   "string_something_else",
		Operator: operator,
	}
}
func ProductInt(operator orm.Operator[int]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, int]{
		Field:    "Int",
		Operator: operator,
	}
}
func ProductIntPointer(operator orm.Operator[int]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, int]{
		Field:    "IntPointer",
		Operator: operator,
	}
}
func ProductFloat(operator orm.Operator[float64]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, float64]{
		Field:    "Float",
		Operator: operator,
	}
}
func ProductNullFloat(operator orm.Operator[float64]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, float64]{
		Field:    "NullFloat",
		Operator: operator,
	}
}
func ProductBool(operator orm.Operator[bool]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, bool]{
		Field:    "Bool",
		Operator: operator,
	}
}
func ProductNullBool(operator orm.Operator[bool]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, bool]{
		Field:    "NullBool",
		Operator: operator,
	}
}
func ProductByteArray(operator orm.Operator[[]uint8]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, []uint8]{
		Field:    "ByteArray",
		Operator: operator,
	}
}
func ProductMultiString(operator orm.Operator[models.MultiString]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, models.MultiString]{
		Field:    "MultiString",
		Operator: operator,
	}
}
func ProductEmbeddedInt(operator orm.Operator[int]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, int]{
		Field:    "EmbeddedInt",
		Operator: operator,
	}
}
func ProductGormEmbeddedInt(operator orm.Operator[int]) orm.WhereCondition[models.Product] {
	return orm.FieldCondition[models.Product, int]{
		ColumnPrefix: "gorm_embedded_",
		Field:        "Int",
		Operator:     operator,
	}
}
