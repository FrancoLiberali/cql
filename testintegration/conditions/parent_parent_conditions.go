// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var parentParentType = reflect.TypeOf(*new(models.ParentParent))
var ParentParentIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: parentParentType,
}

func ParentParentId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.ParentParent] {
	return condition.NewFieldCondition[models.ParentParent, model.UUID](ParentParentIdField, operator)
}

var ParentParentCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: parentParentType,
}

func ParentParentCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.ParentParent] {
	return condition.NewFieldCondition[models.ParentParent, time.Time](ParentParentCreatedAtField, operator)
}

var ParentParentUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: parentParentType,
}

func ParentParentUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.ParentParent] {
	return condition.NewFieldCondition[models.ParentParent, time.Time](ParentParentUpdatedAtField, operator)
}

var ParentParentDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: parentParentType,
}

func ParentParentDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.ParentParent] {
	return condition.NewFieldCondition[models.ParentParent, time.Time](ParentParentDeletedAtField, operator)
}

var ParentParentNameField = query.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: parentParentType,
}

func ParentParentName(operator operator.Operator[string]) condition.WhereCondition[models.ParentParent] {
	return condition.NewFieldCondition[models.ParentParent, string](ParentParentNameField, operator)
}

var ParentParentNumberField = query.FieldIdentifier[int]{
	Field:     "Number",
	ModelType: parentParentType,
}

func ParentParentNumber(operator operator.Operator[int]) condition.WhereCondition[models.ParentParent] {
	return condition.NewFieldCondition[models.ParentParent, int](ParentParentNumberField, operator)
}

var ParentParentPreloadAttributes = condition.NewPreloadCondition[models.ParentParent](ParentParentIdField, ParentParentCreatedAtField, ParentParentUpdatedAtField, ParentParentDeletedAtField, ParentParentNameField, ParentParentNumberField)
