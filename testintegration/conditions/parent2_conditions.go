// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var parent2Type = reflect.TypeOf(*new(models.Parent2))
var Parent2IdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: parent2Type,
}

func Parent2Id(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Parent2] {
	return condition.NewFieldCondition[models.Parent2, model.UUID](Parent2IdField, operator)
}

var Parent2CreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: parent2Type,
}

func Parent2CreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Parent2] {
	return condition.NewFieldCondition[models.Parent2, time.Time](Parent2CreatedAtField, operator)
}

var Parent2UpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: parent2Type,
}

func Parent2UpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Parent2] {
	return condition.NewFieldCondition[models.Parent2, time.Time](Parent2UpdatedAtField, operator)
}

var Parent2DeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: parent2Type,
}

func Parent2DeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Parent2] {
	return condition.NewFieldCondition[models.Parent2, time.Time](Parent2DeletedAtField, operator)
}
func Parent2ParentParent(conditions ...condition.Condition[models.ParentParent]) condition.JoinCondition[models.Parent2] {
	return condition.NewJoinCondition[models.Parent2, models.ParentParent](conditions, "ParentParent", "ParentParentID", Parent2PreloadAttributes, "ID")
}

var Parent2PreloadParentParent = Parent2ParentParent(ParentParentPreloadAttributes)
var Parent2ParentParentIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ParentParentID",
	ModelType: parent2Type,
}

func Parent2ParentParentId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Parent2] {
	return condition.NewFieldCondition[models.Parent2, model.UUID](Parent2ParentParentIdField, operator)
}

var Parent2PreloadAttributes = condition.NewPreloadCondition[models.Parent2](Parent2IdField, Parent2CreatedAtField, Parent2UpdatedAtField, Parent2DeletedAtField, Parent2ParentParentIdField)
var Parent2PreloadRelations = []condition.Condition[models.Parent2]{Parent2PreloadParentParent}
