// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	cql "github.com/ditrit/badaas/orm/cql"
	model "github.com/ditrit/badaas/orm/model"
	models "github.com/ditrit/badaas/testintegration/models"
	"time"
)

func (phoneConditions phoneConditions) Brand(conditions ...cql.Condition[models.Brand]) cql.JoinCondition[models.Phone] {
	return cql.NewJoinCondition[models.Phone, models.Brand](conditions, "Brand", "BrandID", phoneConditions.Preload(), "ID")
}
func (phoneConditions phoneConditions) PreloadBrand() cql.JoinCondition[models.Phone] {
	return phoneConditions.Brand(Brand.Preload())
}

type phoneConditions struct {
	ID        cql.Field[models.Phone, model.UIntID]
	CreatedAt cql.Field[models.Phone, time.Time]
	UpdatedAt cql.Field[models.Phone, time.Time]
	DeletedAt cql.Field[models.Phone, time.Time]
	Name      cql.StringField[models.Phone]
	BrandID   cql.Field[models.Phone, uint]
}

var Phone = phoneConditions{
	BrandID:   cql.Field[models.Phone, uint]{Name: "BrandID"},
	CreatedAt: cql.Field[models.Phone, time.Time]{Name: "CreatedAt"},
	DeletedAt: cql.Field[models.Phone, time.Time]{Name: "DeletedAt"},
	ID:        cql.Field[models.Phone, model.UIntID]{Name: "ID"},
	Name:      cql.StringField[models.Phone]{Field: cql.Field[models.Phone, string]{Name: "Name"}},
	UpdatedAt: cql.Field[models.Phone, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Phone when doing a query
func (phoneConditions phoneConditions) Preload() cql.Condition[models.Phone] {
	return cql.NewPreloadCondition[models.Phone](phoneConditions.ID, phoneConditions.CreatedAt, phoneConditions.UpdatedAt, phoneConditions.DeletedAt, phoneConditions.Name, phoneConditions.BrandID)
}

// PreloadRelations allows preloading all the Phone's relation when doing a query
func (phoneConditions phoneConditions) PreloadRelations() []cql.Condition[models.Phone] {
	return []cql.Condition[models.Phone]{phoneConditions.PreloadBrand()}
}
