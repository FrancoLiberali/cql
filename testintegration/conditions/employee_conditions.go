// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var employeeType = reflect.TypeOf(*new(models.Employee))
var EmployeeIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: employeeType,
}

func EmployeeId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Employee] {
	return condition.NewFieldCondition[models.Employee, model.UUID](EmployeeIdField, operator)
}

var EmployeeCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: employeeType,
}

func EmployeeCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Employee] {
	return condition.NewFieldCondition[models.Employee, time.Time](EmployeeCreatedAtField, operator)
}

var EmployeeUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: employeeType,
}

func EmployeeUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Employee] {
	return condition.NewFieldCondition[models.Employee, time.Time](EmployeeUpdatedAtField, operator)
}

var EmployeeDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: employeeType,
}

func EmployeeDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[models.Employee] {
	return condition.NewFieldCondition[models.Employee, time.Time](EmployeeDeletedAtField, operator)
}

var EmployeeNameField = query.FieldIdentifier[string]{
	Field:     "Name",
	ModelType: employeeType,
}

func EmployeeName(operator operator.Operator[string]) condition.WhereCondition[models.Employee] {
	return condition.NewFieldCondition[models.Employee, string](EmployeeNameField, operator)
}
func EmployeeBoss(conditions ...condition.Condition[models.Employee]) condition.JoinCondition[models.Employee] {
	return condition.NewJoinCondition[models.Employee, models.Employee](conditions, "Boss", "BossID", EmployeePreloadAttributes, "ID")
}

var EmployeePreloadBoss = EmployeeBoss(EmployeePreloadAttributes)
var EmployeeBossIdField = query.FieldIdentifier[model.UUID]{
	Field:     "BossID",
	ModelType: employeeType,
}

func EmployeeBossId(operator operator.Operator[model.UUID]) condition.WhereCondition[models.Employee] {
	return condition.NewFieldCondition[models.Employee, model.UUID](EmployeeBossIdField, operator)
}

var EmployeePreloadAttributes = condition.NewPreloadCondition[models.Employee](EmployeeIdField, EmployeeCreatedAtField, EmployeeUpdatedAtField, EmployeeDeletedAtField, EmployeeNameField, EmployeeBossIdField)
var EmployeePreloadRelations = []condition.Condition[models.Employee]{EmployeePreloadBoss}
