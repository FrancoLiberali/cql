// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	hasmanywithpointers "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/hasmanywithpointers"
	orm "github.com/ditrit/badaas/orm"
	"reflect"
	"time"
)

var sellerInPointersType = reflect.TypeOf(*new(hasmanywithpointers.SellerInPointers))
var SellerInPointersIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "ID",
	ModelType: sellerInPointersType,
}

func SellerInPointersId(operator orm.Operator[orm.UUID]) orm.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return orm.FieldCondition[hasmanywithpointers.SellerInPointers, orm.UUID]{
		FieldIdentifier: SellerInPointersIdField,
		Operator:        operator,
	}
}

var SellerInPointersCreatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: sellerInPointersType,
}

func SellerInPointersCreatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return orm.FieldCondition[hasmanywithpointers.SellerInPointers, time.Time]{
		FieldIdentifier: SellerInPointersCreatedAtField,
		Operator:        operator,
	}
}

var SellerInPointersUpdatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: sellerInPointersType,
}

func SellerInPointersUpdatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return orm.FieldCondition[hasmanywithpointers.SellerInPointers, time.Time]{
		FieldIdentifier: SellerInPointersUpdatedAtField,
		Operator:        operator,
	}
}

var SellerInPointersDeletedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: sellerInPointersType,
}

func SellerInPointersDeletedAt(operator orm.Operator[time.Time]) orm.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return orm.FieldCondition[hasmanywithpointers.SellerInPointers, time.Time]{
		FieldIdentifier: SellerInPointersDeletedAtField,
		Operator:        operator,
	}
}
func SellerInPointersCompany(conditions ...orm.Condition[hasmanywithpointers.CompanyWithPointers]) orm.IJoinCondition[hasmanywithpointers.SellerInPointers] {
	return orm.JoinCondition[hasmanywithpointers.SellerInPointers, hasmanywithpointers.CompanyWithPointers]{
		Conditions:         conditions,
		RelationField:      "Company",
		T1Field:            "CompanyID",
		T1PreloadCondition: SellerInPointersPreloadAttributes,
		T2Field:            "ID",
	}
}

var SellerInPointersPreloadCompany = SellerInPointersCompany(CompanyWithPointersPreloadAttributes)
var SellerInPointersCompanyIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "CompanyID",
	ModelType: sellerInPointersType,
}

func SellerInPointersCompanyId(operator orm.Operator[orm.UUID]) orm.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return orm.FieldCondition[hasmanywithpointers.SellerInPointers, orm.UUID]{
		FieldIdentifier: SellerInPointersCompanyIdField,
		Operator:        operator,
	}
}

var SellerInPointersPreloadAttributes = orm.NewPreloadCondition[hasmanywithpointers.SellerInPointers](SellerInPointersIdField, SellerInPointersCreatedAtField, SellerInPointersUpdatedAtField, SellerInPointersDeletedAtField, SellerInPointersCompanyIdField)
var SellerInPointersPreloadRelations = []orm.Condition[hasmanywithpointers.SellerInPointers]{SellerInPointersPreloadCompany}
