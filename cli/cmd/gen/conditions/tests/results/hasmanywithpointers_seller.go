// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	hasmanywithpointers "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/hasmanywithpointers"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var sellerInPointersType = reflect.TypeOf(*new(hasmanywithpointers.SellerInPointers))
var SellerInPointersIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: sellerInPointersType,
}

func SellerInPointersId(operator operator.Operator[model.UUID]) condition.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return condition.NewFieldCondition[hasmanywithpointers.SellerInPointers, model.UUID](SellerInPointersIdField, operator)
}

var SellerInPointersCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: sellerInPointersType,
}

func SellerInPointersCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return condition.NewFieldCondition[hasmanywithpointers.SellerInPointers, time.Time](SellerInPointersCreatedAtField, operator)
}

var SellerInPointersUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: sellerInPointersType,
}

func SellerInPointersUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return condition.NewFieldCondition[hasmanywithpointers.SellerInPointers, time.Time](SellerInPointersUpdatedAtField, operator)
}

var SellerInPointersDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: sellerInPointersType,
}

func SellerInPointersDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return condition.NewFieldCondition[hasmanywithpointers.SellerInPointers, time.Time](SellerInPointersDeletedAtField, operator)
}
func SellerInPointersCompany(conditions ...condition.Condition[hasmanywithpointers.CompanyWithPointers]) condition.JoinCondition[hasmanywithpointers.SellerInPointers] {
	return condition.NewJoinCondition[hasmanywithpointers.SellerInPointers, hasmanywithpointers.CompanyWithPointers](conditions, "Company", "CompanyID", SellerInPointersPreloadAttributes, "ID")
}

var SellerInPointersPreloadCompany = SellerInPointersCompany(CompanyWithPointersPreloadAttributes)
var SellerInPointersCompanyIdField = query.FieldIdentifier[model.UUID]{
	Field:     "CompanyID",
	ModelType: sellerInPointersType,
}

func SellerInPointersCompanyId(operator operator.Operator[model.UUID]) condition.WhereCondition[hasmanywithpointers.SellerInPointers] {
	return condition.NewFieldCondition[hasmanywithpointers.SellerInPointers, model.UUID](SellerInPointersCompanyIdField, operator)
}

var SellerInPointersPreloadAttributes = condition.NewPreloadCondition[hasmanywithpointers.SellerInPointers](SellerInPointersIdField, SellerInPointersCreatedAtField, SellerInPointersUpdatedAtField, SellerInPointersDeletedAtField, SellerInPointersCompanyIdField)
var SellerInPointersPreloadRelations = []condition.Condition[hasmanywithpointers.SellerInPointers]{SellerInPointersPreloadCompany}
