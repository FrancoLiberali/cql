// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	basicpointers "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/basicpointers"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var basicPointersType = reflect.TypeOf(*new(basicpointers.BasicPointers))
var BasicPointersIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: basicPointersType,
}

func BasicPointersId(operator operator.Operator[model.UUID]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, model.UUID](BasicPointersIdField, operator)
}

var BasicPointersCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: basicPointersType,
}

func BasicPointersCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, time.Time](BasicPointersCreatedAtField, operator)
}

var BasicPointersUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: basicPointersType,
}

func BasicPointersUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, time.Time](BasicPointersUpdatedAtField, operator)
}

var BasicPointersDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: basicPointersType,
}

func BasicPointersDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, time.Time](BasicPointersDeletedAtField, operator)
}

var BasicPointersBoolField = query.FieldIdentifier[bool]{
	Field:     "Bool",
	ModelType: basicPointersType,
}

func BasicPointersBool(operator operator.Operator[bool]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, bool](BasicPointersBoolField, operator)
}

var BasicPointersIntField = query.FieldIdentifier[int]{
	Field:     "Int",
	ModelType: basicPointersType,
}

func BasicPointersInt(operator operator.Operator[int]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, int](BasicPointersIntField, operator)
}

var BasicPointersInt8Field = query.FieldIdentifier[int8]{
	Field:     "Int8",
	ModelType: basicPointersType,
}

func BasicPointersInt8(operator operator.Operator[int8]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, int8](BasicPointersInt8Field, operator)
}

var BasicPointersInt16Field = query.FieldIdentifier[int16]{
	Field:     "Int16",
	ModelType: basicPointersType,
}

func BasicPointersInt16(operator operator.Operator[int16]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, int16](BasicPointersInt16Field, operator)
}

var BasicPointersInt32Field = query.FieldIdentifier[int32]{
	Field:     "Int32",
	ModelType: basicPointersType,
}

func BasicPointersInt32(operator operator.Operator[int32]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, int32](BasicPointersInt32Field, operator)
}

var BasicPointersInt64Field = query.FieldIdentifier[int64]{
	Field:     "Int64",
	ModelType: basicPointersType,
}

func BasicPointersInt64(operator operator.Operator[int64]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, int64](BasicPointersInt64Field, operator)
}

var BasicPointersUIntField = query.FieldIdentifier[uint]{
	Field:     "UInt",
	ModelType: basicPointersType,
}

func BasicPointersUInt(operator operator.Operator[uint]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, uint](BasicPointersUIntField, operator)
}

var BasicPointersUInt8Field = query.FieldIdentifier[uint8]{
	Field:     "UInt8",
	ModelType: basicPointersType,
}

func BasicPointersUInt8(operator operator.Operator[uint8]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, uint8](BasicPointersUInt8Field, operator)
}

var BasicPointersUInt16Field = query.FieldIdentifier[uint16]{
	Field:     "UInt16",
	ModelType: basicPointersType,
}

func BasicPointersUInt16(operator operator.Operator[uint16]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, uint16](BasicPointersUInt16Field, operator)
}

var BasicPointersUInt32Field = query.FieldIdentifier[uint32]{
	Field:     "UInt32",
	ModelType: basicPointersType,
}

func BasicPointersUInt32(operator operator.Operator[uint32]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, uint32](BasicPointersUInt32Field, operator)
}

var BasicPointersUInt64Field = query.FieldIdentifier[uint64]{
	Field:     "UInt64",
	ModelType: basicPointersType,
}

func BasicPointersUInt64(operator operator.Operator[uint64]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, uint64](BasicPointersUInt64Field, operator)
}

var BasicPointersUIntptrField = query.FieldIdentifier[uintptr]{
	Field:     "UIntptr",
	ModelType: basicPointersType,
}

func BasicPointersUIntptr(operator operator.Operator[uintptr]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, uintptr](BasicPointersUIntptrField, operator)
}

var BasicPointersFloat32Field = query.FieldIdentifier[float32]{
	Field:     "Float32",
	ModelType: basicPointersType,
}

func BasicPointersFloat32(operator operator.Operator[float32]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, float32](BasicPointersFloat32Field, operator)
}

var BasicPointersFloat64Field = query.FieldIdentifier[float64]{
	Field:     "Float64",
	ModelType: basicPointersType,
}

func BasicPointersFloat64(operator operator.Operator[float64]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, float64](BasicPointersFloat64Field, operator)
}

var BasicPointersComplex64Field = query.FieldIdentifier[complex64]{
	Field:     "Complex64",
	ModelType: basicPointersType,
}

func BasicPointersComplex64(operator operator.Operator[complex64]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, complex64](BasicPointersComplex64Field, operator)
}

var BasicPointersComplex128Field = query.FieldIdentifier[complex128]{
	Field:     "Complex128",
	ModelType: basicPointersType,
}

func BasicPointersComplex128(operator operator.Operator[complex128]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, complex128](BasicPointersComplex128Field, operator)
}

var BasicPointersStringField = query.FieldIdentifier[string]{
	Field:     "String",
	ModelType: basicPointersType,
}

func BasicPointersString(operator operator.Operator[string]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, string](BasicPointersStringField, operator)
}

var BasicPointersByteField = query.FieldIdentifier[uint8]{
	Field:     "Byte",
	ModelType: basicPointersType,
}

func BasicPointersByte(operator operator.Operator[uint8]) condition.WhereCondition[basicpointers.BasicPointers] {
	return condition.NewFieldCondition[basicpointers.BasicPointers, uint8](BasicPointersByteField, operator)
}

var BasicPointersPreloadAttributes = condition.NewPreloadCondition[basicpointers.BasicPointers](BasicPointersIdField, BasicPointersCreatedAtField, BasicPointersUpdatedAtField, BasicPointersDeletedAtField, BasicPointersBoolField, BasicPointersIntField, BasicPointersInt8Field, BasicPointersInt16Field, BasicPointersInt32Field, BasicPointersInt64Field, BasicPointersUIntField, BasicPointersUInt8Field, BasicPointersUInt16Field, BasicPointersUInt32Field, BasicPointersUInt64Field, BasicPointersUIntptrField, BasicPointersFloat32Field, BasicPointersFloat64Field, BasicPointersComplex64Field, BasicPointersComplex128Field, BasicPointersStringField, BasicPointersByteField)
