// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	hasmany "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/hasmany"
	orm "github.com/ditrit/badaas/orm"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var sellerType = reflect.TypeOf(*new(hasmany.Seller))

func (sellerConditions sellerConditions) IdIs() orm.FieldIs[hasmany.Seller, model.UUID] {
	return orm.FieldIs[hasmany.Seller, model.UUID]{FieldID: sellerConditions.ID}
}
func (sellerConditions sellerConditions) CreatedAtIs() orm.FieldIs[hasmany.Seller, time.Time] {
	return orm.FieldIs[hasmany.Seller, time.Time]{FieldID: sellerConditions.CreatedAt}
}
func (sellerConditions sellerConditions) UpdatedAtIs() orm.FieldIs[hasmany.Seller, time.Time] {
	return orm.FieldIs[hasmany.Seller, time.Time]{FieldID: sellerConditions.UpdatedAt}
}
func (sellerConditions sellerConditions) DeletedAtIs() orm.FieldIs[hasmany.Seller, time.Time] {
	return orm.FieldIs[hasmany.Seller, time.Time]{FieldID: sellerConditions.DeletedAt}
}
func (sellerConditions sellerConditions) Company(conditions ...condition.Condition[hasmany.Company]) condition.JoinCondition[hasmany.Seller] {
	return condition.NewJoinCondition[hasmany.Seller, hasmany.Company](conditions, "Company", "CompanyID", sellerConditions.Preload(), "ID")
}
func (sellerConditions sellerConditions) PreloadCompany() condition.JoinCondition[hasmany.Seller] {
	return sellerConditions.Company(Company.Preload())
}
func (sellerConditions sellerConditions) CompanyIdIs() orm.FieldIs[hasmany.Seller, model.UUID] {
	return orm.FieldIs[hasmany.Seller, model.UUID]{FieldID: sellerConditions.CompanyID}
}

type sellerConditions struct {
	ID        query.FieldIdentifier[model.UUID]
	CreatedAt query.FieldIdentifier[time.Time]
	UpdatedAt query.FieldIdentifier[time.Time]
	DeletedAt query.FieldIdentifier[time.Time]
	CompanyID query.FieldIdentifier[model.UUID]
}

var Seller = sellerConditions{
	CompanyID: query.FieldIdentifier[model.UUID]{
		Field:     "CompanyID",
		ModelType: sellerType,
	},
	CreatedAt: query.FieldIdentifier[time.Time]{
		Field:     "CreatedAt",
		ModelType: sellerType,
	},
	DeletedAt: query.FieldIdentifier[time.Time]{
		Field:     "DeletedAt",
		ModelType: sellerType,
	},
	ID: query.FieldIdentifier[model.UUID]{
		Field:     "ID",
		ModelType: sellerType,
	},
	UpdatedAt: query.FieldIdentifier[time.Time]{
		Field:     "UpdatedAt",
		ModelType: sellerType,
	},
}

// Preload allows preloading the Seller when doing a query
func (sellerConditions sellerConditions) Preload() condition.Condition[hasmany.Seller] {
	return condition.NewPreloadCondition[hasmany.Seller](sellerConditions.ID, sellerConditions.CreatedAt, sellerConditions.UpdatedAt, sellerConditions.DeletedAt, sellerConditions.CompanyID)
}

// PreloadRelations allows preloading all the Seller's relation when doing a query
func (sellerConditions sellerConditions) PreloadRelations() []condition.Condition[hasmany.Seller] {
	return []condition.Condition[hasmany.Seller]{sellerConditions.PreloadCompany()}
}
