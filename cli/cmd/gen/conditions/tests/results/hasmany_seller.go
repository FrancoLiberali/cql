// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	hasmany "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/hasmany"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var sellerType = reflect.TypeOf(*new(hasmany.Seller))
var SellerIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: sellerType,
}

func SellerId(operator operator.Operator[model.UUID]) condition.WhereCondition[hasmany.Seller] {
	return condition.NewFieldCondition[hasmany.Seller, model.UUID](SellerIdField, operator)
}

var SellerCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: sellerType,
}

func SellerCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[hasmany.Seller] {
	return condition.NewFieldCondition[hasmany.Seller, time.Time](SellerCreatedAtField, operator)
}

var SellerUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: sellerType,
}

func SellerUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[hasmany.Seller] {
	return condition.NewFieldCondition[hasmany.Seller, time.Time](SellerUpdatedAtField, operator)
}

var SellerDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: sellerType,
}

func SellerDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[hasmany.Seller] {
	return condition.NewFieldCondition[hasmany.Seller, time.Time](SellerDeletedAtField, operator)
}
func SellerCompany(conditions ...condition.Condition[hasmany.Company]) condition.JoinCondition[hasmany.Seller] {
	return condition.NewJoinCondition[hasmany.Seller, hasmany.Company](conditions, "Company", "CompanyID", SellerPreloadAttributes, "ID")
}

var SellerPreloadCompany = SellerCompany(CompanyPreloadAttributes)
var SellerCompanyIdField = query.FieldIdentifier[model.UUID]{
	Field:     "CompanyID",
	ModelType: sellerType,
}

func SellerCompanyId(operator operator.Operator[model.UUID]) condition.WhereCondition[hasmany.Seller] {
	return condition.NewFieldCondition[hasmany.Seller, model.UUID](SellerCompanyIdField, operator)
}

var SellerPreloadAttributes = condition.NewPreloadCondition[hasmany.Seller](SellerIdField, SellerCreatedAtField, SellerUpdatedAtField, SellerDeletedAtField, SellerCompanyIdField)
var SellerPreloadRelations = []condition.Condition[hasmany.Seller]{SellerPreloadCompany}
