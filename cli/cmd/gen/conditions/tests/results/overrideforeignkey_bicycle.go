// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	overrideforeignkey "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/overrideforeignkey"
	orm "github.com/ditrit/badaas/orm"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var bicycleType = reflect.TypeOf(*new(overrideforeignkey.Bicycle))

func (bicycleConditions bicycleConditions) IdIs() orm.FieldIs[overrideforeignkey.Bicycle, model.UUID] {
	return orm.FieldIs[overrideforeignkey.Bicycle, model.UUID]{FieldID: bicycleConditions.ID}
}
func (bicycleConditions bicycleConditions) CreatedAtIs() orm.FieldIs[overrideforeignkey.Bicycle, time.Time] {
	return orm.FieldIs[overrideforeignkey.Bicycle, time.Time]{FieldID: bicycleConditions.CreatedAt}
}
func (bicycleConditions bicycleConditions) UpdatedAtIs() orm.FieldIs[overrideforeignkey.Bicycle, time.Time] {
	return orm.FieldIs[overrideforeignkey.Bicycle, time.Time]{FieldID: bicycleConditions.UpdatedAt}
}
func (bicycleConditions bicycleConditions) DeletedAtIs() orm.FieldIs[overrideforeignkey.Bicycle, time.Time] {
	return orm.FieldIs[overrideforeignkey.Bicycle, time.Time]{FieldID: bicycleConditions.DeletedAt}
}
func (bicycleConditions bicycleConditions) Owner(conditions ...condition.Condition[overrideforeignkey.Person]) condition.JoinCondition[overrideforeignkey.Bicycle] {
	return condition.NewJoinCondition[overrideforeignkey.Bicycle, overrideforeignkey.Person](conditions, "Owner", "OwnerSomethingID", bicycleConditions.Preload(), "ID")
}
func (bicycleConditions bicycleConditions) PreloadOwner() condition.JoinCondition[overrideforeignkey.Bicycle] {
	return bicycleConditions.Owner(Person.Preload())
}
func (bicycleConditions bicycleConditions) OwnerSomethingIdIs() orm.StringFieldIs[overrideforeignkey.Bicycle] {
	return orm.StringFieldIs[overrideforeignkey.Bicycle]{FieldIs: orm.FieldIs[overrideforeignkey.Bicycle, string]{FieldID: bicycleConditions.OwnerSomethingID}}
}

type bicycleConditions struct {
	ID               query.FieldIdentifier[model.UUID]
	CreatedAt        query.FieldIdentifier[time.Time]
	UpdatedAt        query.FieldIdentifier[time.Time]
	DeletedAt        query.FieldIdentifier[time.Time]
	OwnerSomethingID query.FieldIdentifier[string]
}

var Bicycle = bicycleConditions{
	CreatedAt: query.FieldIdentifier[time.Time]{
		Field:     "CreatedAt",
		ModelType: bicycleType,
	},
	DeletedAt: query.FieldIdentifier[time.Time]{
		Field:     "DeletedAt",
		ModelType: bicycleType,
	},
	ID: query.FieldIdentifier[model.UUID]{
		Field:     "ID",
		ModelType: bicycleType,
	},
	OwnerSomethingID: query.FieldIdentifier[string]{
		Field:     "OwnerSomethingID",
		ModelType: bicycleType,
	},
	UpdatedAt: query.FieldIdentifier[time.Time]{
		Field:     "UpdatedAt",
		ModelType: bicycleType,
	},
}

// Preload allows preloading the Bicycle when doing a query
func (bicycleConditions bicycleConditions) Preload() condition.Condition[overrideforeignkey.Bicycle] {
	return condition.NewPreloadCondition[overrideforeignkey.Bicycle](bicycleConditions.ID, bicycleConditions.CreatedAt, bicycleConditions.UpdatedAt, bicycleConditions.DeletedAt, bicycleConditions.OwnerSomethingID)
}

// PreloadRelations allows preloading all the Bicycle's relation when doing a query
func (bicycleConditions bicycleConditions) PreloadRelations() []condition.Condition[overrideforeignkey.Bicycle] {
	return []condition.Condition[overrideforeignkey.Bicycle]{bicycleConditions.PreloadOwner()}
}
