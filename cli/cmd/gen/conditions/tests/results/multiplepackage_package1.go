// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	package1 "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/multiplepackage/package1"
	package2 "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/multiplepackage/package2"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var package1Type = reflect.TypeOf(*new(package1.Package1))
var Package1IdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: package1Type,
}

func Package1Id(operator operator.Operator[model.UUID]) condition.WhereCondition[package1.Package1] {
	return condition.NewFieldCondition[package1.Package1, model.UUID](Package1IdField, operator)
}

var Package1CreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: package1Type,
}

func Package1CreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[package1.Package1] {
	return condition.NewFieldCondition[package1.Package1, time.Time](Package1CreatedAtField, operator)
}

var Package1UpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: package1Type,
}

func Package1UpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[package1.Package1] {
	return condition.NewFieldCondition[package1.Package1, time.Time](Package1UpdatedAtField, operator)
}

var Package1DeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: package1Type,
}

func Package1DeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[package1.Package1] {
	return condition.NewFieldCondition[package1.Package1, time.Time](Package1DeletedAtField, operator)
}
func Package1Package2(conditions ...condition.Condition[package2.Package2]) condition.JoinCondition[package1.Package1] {
	return condition.NewJoinCondition[package1.Package1, package2.Package2](conditions, "Package2", "ID", Package1PreloadAttributes, "Package1ID")
}

var Package1PreloadPackage2 = Package1Package2(Package2PreloadAttributes)
var Package1PreloadAttributes = condition.NewPreloadCondition[package1.Package1](Package1IdField, Package1CreatedAtField, Package1UpdatedAtField, Package1DeletedAtField)
var Package1PreloadRelations = []condition.Condition[package1.Package1]{Package1PreloadPackage2}
