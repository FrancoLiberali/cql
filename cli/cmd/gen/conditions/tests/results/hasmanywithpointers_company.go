// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	hasmanywithpointers "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/hasmanywithpointers"
	orm "github.com/ditrit/badaas/orm"
	"reflect"
	"time"
)

var companyWithPointersType = reflect.TypeOf(*new(hasmanywithpointers.CompanyWithPointers))
var CompanyWithPointersIdField = orm.FieldIdentifier[orm.UUID]{
	Field:     "ID",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersId(operator orm.Operator[orm.UUID]) orm.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return orm.FieldCondition[hasmanywithpointers.CompanyWithPointers, orm.UUID]{
		FieldIdentifier: CompanyWithPointersIdField,
		Operator:        operator,
	}
}

var CompanyWithPointersCreatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersCreatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return orm.FieldCondition[hasmanywithpointers.CompanyWithPointers, time.Time]{
		FieldIdentifier: CompanyWithPointersCreatedAtField,
		Operator:        operator,
	}
}

var CompanyWithPointersUpdatedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersUpdatedAt(operator orm.Operator[time.Time]) orm.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return orm.FieldCondition[hasmanywithpointers.CompanyWithPointers, time.Time]{
		FieldIdentifier: CompanyWithPointersUpdatedAtField,
		Operator:        operator,
	}
}

var CompanyWithPointersDeletedAtField = orm.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersDeletedAt(operator orm.Operator[time.Time]) orm.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return orm.FieldCondition[hasmanywithpointers.CompanyWithPointers, time.Time]{
		FieldIdentifier: CompanyWithPointersDeletedAtField,
		Operator:        operator,
	}
}
func CompanyWithPointersPreloadSellers(nestedPreloads ...orm.IJoinCondition[hasmanywithpointers.SellerInPointers]) orm.Condition[hasmanywithpointers.CompanyWithPointers] {
	return orm.NewCollectionPreloadCondition[hasmanywithpointers.CompanyWithPointers, hasmanywithpointers.SellerInPointers]("Sellers", nestedPreloads)
}

var CompanyWithPointersPreloadAttributes = orm.NewPreloadCondition[hasmanywithpointers.CompanyWithPointers](CompanyWithPointersIdField, CompanyWithPointersCreatedAtField, CompanyWithPointersUpdatedAtField, CompanyWithPointersDeletedAtField)
var CompanyWithPointersPreloadRelations = []orm.Condition[hasmanywithpointers.CompanyWithPointers]{CompanyWithPointersPreloadSellers()}
