// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	hasmanywithpointers "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/hasmanywithpointers"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var companyWithPointersType = reflect.TypeOf(*new(hasmanywithpointers.CompanyWithPointers))
var CompanyWithPointersIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersId(operator operator.Operator[model.UUID]) condition.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return condition.NewFieldCondition[hasmanywithpointers.CompanyWithPointers, model.UUID](CompanyWithPointersIdField, operator)
}

var CompanyWithPointersCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return condition.NewFieldCondition[hasmanywithpointers.CompanyWithPointers, time.Time](CompanyWithPointersCreatedAtField, operator)
}

var CompanyWithPointersUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return condition.NewFieldCondition[hasmanywithpointers.CompanyWithPointers, time.Time](CompanyWithPointersUpdatedAtField, operator)
}

var CompanyWithPointersDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: companyWithPointersType,
}

func CompanyWithPointersDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[hasmanywithpointers.CompanyWithPointers] {
	return condition.NewFieldCondition[hasmanywithpointers.CompanyWithPointers, time.Time](CompanyWithPointersDeletedAtField, operator)
}
func CompanyWithPointersPreloadSellers(nestedPreloads ...condition.JoinCondition[hasmanywithpointers.SellerInPointers]) condition.Condition[hasmanywithpointers.CompanyWithPointers] {
	return condition.NewCollectionPreloadCondition[hasmanywithpointers.CompanyWithPointers, hasmanywithpointers.SellerInPointers]("Sellers", nestedPreloads)
}

var CompanyWithPointersPreloadAttributes = condition.NewPreloadCondition[hasmanywithpointers.CompanyWithPointers](CompanyWithPointersIdField, CompanyWithPointersCreatedAtField, CompanyWithPointersUpdatedAtField, CompanyWithPointersDeletedAtField)
var CompanyWithPointersPreloadRelations = []condition.Condition[hasmanywithpointers.CompanyWithPointers]{CompanyWithPointersPreloadSellers()}
