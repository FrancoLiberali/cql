// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	basictypes "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/basictypes"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var basicTypesType = reflect.TypeOf(*new(basictypes.BasicTypes))
var BasicTypesIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: basicTypesType,
}

func BasicTypesId(operator operator.Operator[model.UUID]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, model.UUID](BasicTypesIdField, operator)
}

var BasicTypesCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: basicTypesType,
}

func BasicTypesCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, time.Time](BasicTypesCreatedAtField, operator)
}

var BasicTypesUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: basicTypesType,
}

func BasicTypesUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, time.Time](BasicTypesUpdatedAtField, operator)
}

var BasicTypesDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: basicTypesType,
}

func BasicTypesDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, time.Time](BasicTypesDeletedAtField, operator)
}

var BasicTypesBoolField = query.FieldIdentifier[bool]{
	Field:     "Bool",
	ModelType: basicTypesType,
}

func BasicTypesBool(operator operator.Operator[bool]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, bool](BasicTypesBoolField, operator)
}

var BasicTypesIntField = query.FieldIdentifier[int]{
	Field:     "Int",
	ModelType: basicTypesType,
}

func BasicTypesInt(operator operator.Operator[int]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, int](BasicTypesIntField, operator)
}

var BasicTypesInt8Field = query.FieldIdentifier[int8]{
	Field:     "Int8",
	ModelType: basicTypesType,
}

func BasicTypesInt8(operator operator.Operator[int8]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, int8](BasicTypesInt8Field, operator)
}

var BasicTypesInt16Field = query.FieldIdentifier[int16]{
	Field:     "Int16",
	ModelType: basicTypesType,
}

func BasicTypesInt16(operator operator.Operator[int16]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, int16](BasicTypesInt16Field, operator)
}

var BasicTypesInt32Field = query.FieldIdentifier[int32]{
	Field:     "Int32",
	ModelType: basicTypesType,
}

func BasicTypesInt32(operator operator.Operator[int32]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, int32](BasicTypesInt32Field, operator)
}

var BasicTypesInt64Field = query.FieldIdentifier[int64]{
	Field:     "Int64",
	ModelType: basicTypesType,
}

func BasicTypesInt64(operator operator.Operator[int64]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, int64](BasicTypesInt64Field, operator)
}

var BasicTypesUIntField = query.FieldIdentifier[uint]{
	Field:     "UInt",
	ModelType: basicTypesType,
}

func BasicTypesUInt(operator operator.Operator[uint]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, uint](BasicTypesUIntField, operator)
}

var BasicTypesUInt8Field = query.FieldIdentifier[uint8]{
	Field:     "UInt8",
	ModelType: basicTypesType,
}

func BasicTypesUInt8(operator operator.Operator[uint8]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, uint8](BasicTypesUInt8Field, operator)
}

var BasicTypesUInt16Field = query.FieldIdentifier[uint16]{
	Field:     "UInt16",
	ModelType: basicTypesType,
}

func BasicTypesUInt16(operator operator.Operator[uint16]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, uint16](BasicTypesUInt16Field, operator)
}

var BasicTypesUInt32Field = query.FieldIdentifier[uint32]{
	Field:     "UInt32",
	ModelType: basicTypesType,
}

func BasicTypesUInt32(operator operator.Operator[uint32]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, uint32](BasicTypesUInt32Field, operator)
}

var BasicTypesUInt64Field = query.FieldIdentifier[uint64]{
	Field:     "UInt64",
	ModelType: basicTypesType,
}

func BasicTypesUInt64(operator operator.Operator[uint64]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, uint64](BasicTypesUInt64Field, operator)
}

var BasicTypesUIntptrField = query.FieldIdentifier[uintptr]{
	Field:     "UIntptr",
	ModelType: basicTypesType,
}

func BasicTypesUIntptr(operator operator.Operator[uintptr]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, uintptr](BasicTypesUIntptrField, operator)
}

var BasicTypesFloat32Field = query.FieldIdentifier[float32]{
	Field:     "Float32",
	ModelType: basicTypesType,
}

func BasicTypesFloat32(operator operator.Operator[float32]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, float32](BasicTypesFloat32Field, operator)
}

var BasicTypesFloat64Field = query.FieldIdentifier[float64]{
	Field:     "Float64",
	ModelType: basicTypesType,
}

func BasicTypesFloat64(operator operator.Operator[float64]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, float64](BasicTypesFloat64Field, operator)
}

var BasicTypesComplex64Field = query.FieldIdentifier[complex64]{
	Field:     "Complex64",
	ModelType: basicTypesType,
}

func BasicTypesComplex64(operator operator.Operator[complex64]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, complex64](BasicTypesComplex64Field, operator)
}

var BasicTypesComplex128Field = query.FieldIdentifier[complex128]{
	Field:     "Complex128",
	ModelType: basicTypesType,
}

func BasicTypesComplex128(operator operator.Operator[complex128]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, complex128](BasicTypesComplex128Field, operator)
}

var BasicTypesStringField = query.FieldIdentifier[string]{
	Field:     "String",
	ModelType: basicTypesType,
}

func BasicTypesString(operator operator.Operator[string]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, string](BasicTypesStringField, operator)
}

var BasicTypesByteField = query.FieldIdentifier[uint8]{
	Field:     "Byte",
	ModelType: basicTypesType,
}

func BasicTypesByte(operator operator.Operator[uint8]) condition.WhereCondition[basictypes.BasicTypes] {
	return condition.NewFieldCondition[basictypes.BasicTypes, uint8](BasicTypesByteField, operator)
}

var BasicTypesPreloadAttributes = condition.NewPreloadCondition[basictypes.BasicTypes](BasicTypesIdField, BasicTypesCreatedAtField, BasicTypesUpdatedAtField, BasicTypesDeletedAtField, BasicTypesBoolField, BasicTypesIntField, BasicTypesInt8Field, BasicTypesInt16Field, BasicTypesInt32Field, BasicTypesInt64Field, BasicTypesUIntField, BasicTypesUInt8Field, BasicTypesUInt16Field, BasicTypesUInt32Field, BasicTypesUInt64Field, BasicTypesUIntptrField, BasicTypesFloat32Field, BasicTypesFloat64Field, BasicTypesComplex64Field, BasicTypesComplex128Field, BasicTypesStringField, BasicTypesByteField)
