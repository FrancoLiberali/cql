// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	basictypes "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/basictypes"
	orm "github.com/ditrit/badaas/orm"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var basicTypesType = reflect.TypeOf(*new(basictypes.BasicTypes))

func (basicTypesConditions basicTypesConditions) IdIs() orm.FieldIs[basictypes.BasicTypes, model.UUID] {
	return orm.FieldIs[basictypes.BasicTypes, model.UUID]{FieldID: basicTypesConditions.ID}
}
func (basicTypesConditions basicTypesConditions) CreatedAtIs() orm.FieldIs[basictypes.BasicTypes, time.Time] {
	return orm.FieldIs[basictypes.BasicTypes, time.Time]{FieldID: basicTypesConditions.CreatedAt}
}
func (basicTypesConditions basicTypesConditions) UpdatedAtIs() orm.FieldIs[basictypes.BasicTypes, time.Time] {
	return orm.FieldIs[basictypes.BasicTypes, time.Time]{FieldID: basicTypesConditions.UpdatedAt}
}
func (basicTypesConditions basicTypesConditions) DeletedAtIs() orm.FieldIs[basictypes.BasicTypes, time.Time] {
	return orm.FieldIs[basictypes.BasicTypes, time.Time]{FieldID: basicTypesConditions.DeletedAt}
}
func (basicTypesConditions basicTypesConditions) BoolIs() orm.BoolFieldIs[basictypes.BasicTypes] {
	return orm.BoolFieldIs[basictypes.BasicTypes]{FieldIs: orm.FieldIs[basictypes.BasicTypes, bool]{FieldID: basicTypesConditions.Bool}}
}
func (basicTypesConditions basicTypesConditions) IntIs() orm.FieldIs[basictypes.BasicTypes, int] {
	return orm.FieldIs[basictypes.BasicTypes, int]{FieldID: basicTypesConditions.Int}
}
func (basicTypesConditions basicTypesConditions) Int8Is() orm.FieldIs[basictypes.BasicTypes, int8] {
	return orm.FieldIs[basictypes.BasicTypes, int8]{FieldID: basicTypesConditions.Int8}
}
func (basicTypesConditions basicTypesConditions) Int16Is() orm.FieldIs[basictypes.BasicTypes, int16] {
	return orm.FieldIs[basictypes.BasicTypes, int16]{FieldID: basicTypesConditions.Int16}
}
func (basicTypesConditions basicTypesConditions) Int32Is() orm.FieldIs[basictypes.BasicTypes, int32] {
	return orm.FieldIs[basictypes.BasicTypes, int32]{FieldID: basicTypesConditions.Int32}
}
func (basicTypesConditions basicTypesConditions) Int64Is() orm.FieldIs[basictypes.BasicTypes, int64] {
	return orm.FieldIs[basictypes.BasicTypes, int64]{FieldID: basicTypesConditions.Int64}
}
func (basicTypesConditions basicTypesConditions) UIntIs() orm.FieldIs[basictypes.BasicTypes, uint] {
	return orm.FieldIs[basictypes.BasicTypes, uint]{FieldID: basicTypesConditions.UInt}
}
func (basicTypesConditions basicTypesConditions) UInt8Is() orm.FieldIs[basictypes.BasicTypes, uint8] {
	return orm.FieldIs[basictypes.BasicTypes, uint8]{FieldID: basicTypesConditions.UInt8}
}
func (basicTypesConditions basicTypesConditions) UInt16Is() orm.FieldIs[basictypes.BasicTypes, uint16] {
	return orm.FieldIs[basictypes.BasicTypes, uint16]{FieldID: basicTypesConditions.UInt16}
}
func (basicTypesConditions basicTypesConditions) UInt32Is() orm.FieldIs[basictypes.BasicTypes, uint32] {
	return orm.FieldIs[basictypes.BasicTypes, uint32]{FieldID: basicTypesConditions.UInt32}
}
func (basicTypesConditions basicTypesConditions) UInt64Is() orm.FieldIs[basictypes.BasicTypes, uint64] {
	return orm.FieldIs[basictypes.BasicTypes, uint64]{FieldID: basicTypesConditions.UInt64}
}
func (basicTypesConditions basicTypesConditions) UIntptrIs() orm.FieldIs[basictypes.BasicTypes, uintptr] {
	return orm.FieldIs[basictypes.BasicTypes, uintptr]{FieldID: basicTypesConditions.UIntptr}
}
func (basicTypesConditions basicTypesConditions) Float32Is() orm.FieldIs[basictypes.BasicTypes, float32] {
	return orm.FieldIs[basictypes.BasicTypes, float32]{FieldID: basicTypesConditions.Float32}
}
func (basicTypesConditions basicTypesConditions) Float64Is() orm.FieldIs[basictypes.BasicTypes, float64] {
	return orm.FieldIs[basictypes.BasicTypes, float64]{FieldID: basicTypesConditions.Float64}
}
func (basicTypesConditions basicTypesConditions) Complex64Is() orm.FieldIs[basictypes.BasicTypes, complex64] {
	return orm.FieldIs[basictypes.BasicTypes, complex64]{FieldID: basicTypesConditions.Complex64}
}
func (basicTypesConditions basicTypesConditions) Complex128Is() orm.FieldIs[basictypes.BasicTypes, complex128] {
	return orm.FieldIs[basictypes.BasicTypes, complex128]{FieldID: basicTypesConditions.Complex128}
}
func (basicTypesConditions basicTypesConditions) StringIs() orm.StringFieldIs[basictypes.BasicTypes] {
	return orm.StringFieldIs[basictypes.BasicTypes]{FieldIs: orm.FieldIs[basictypes.BasicTypes, string]{FieldID: basicTypesConditions.String}}
}
func (basicTypesConditions basicTypesConditions) ByteIs() orm.FieldIs[basictypes.BasicTypes, uint8] {
	return orm.FieldIs[basictypes.BasicTypes, uint8]{FieldID: basicTypesConditions.Byte}
}

type basicTypesConditions struct {
	ID         query.FieldIdentifier[model.UUID]
	CreatedAt  query.FieldIdentifier[time.Time]
	UpdatedAt  query.FieldIdentifier[time.Time]
	DeletedAt  query.FieldIdentifier[time.Time]
	Bool       query.FieldIdentifier[bool]
	Int        query.FieldIdentifier[int]
	Int8       query.FieldIdentifier[int8]
	Int16      query.FieldIdentifier[int16]
	Int32      query.FieldIdentifier[int32]
	Int64      query.FieldIdentifier[int64]
	UInt       query.FieldIdentifier[uint]
	UInt8      query.FieldIdentifier[uint8]
	UInt16     query.FieldIdentifier[uint16]
	UInt32     query.FieldIdentifier[uint32]
	UInt64     query.FieldIdentifier[uint64]
	UIntptr    query.FieldIdentifier[uintptr]
	Float32    query.FieldIdentifier[float32]
	Float64    query.FieldIdentifier[float64]
	Complex64  query.FieldIdentifier[complex64]
	Complex128 query.FieldIdentifier[complex128]
	String     query.FieldIdentifier[string]
	Byte       query.FieldIdentifier[uint8]
}

var BasicTypes = basicTypesConditions{
	Bool: query.FieldIdentifier[bool]{
		Field:     "Bool",
		ModelType: basicTypesType,
	},
	Byte: query.FieldIdentifier[uint8]{
		Field:     "Byte",
		ModelType: basicTypesType,
	},
	Complex128: query.FieldIdentifier[complex128]{
		Field:     "Complex128",
		ModelType: basicTypesType,
	},
	Complex64: query.FieldIdentifier[complex64]{
		Field:     "Complex64",
		ModelType: basicTypesType,
	},
	CreatedAt: query.FieldIdentifier[time.Time]{
		Field:     "CreatedAt",
		ModelType: basicTypesType,
	},
	DeletedAt: query.FieldIdentifier[time.Time]{
		Field:     "DeletedAt",
		ModelType: basicTypesType,
	},
	Float32: query.FieldIdentifier[float32]{
		Field:     "Float32",
		ModelType: basicTypesType,
	},
	Float64: query.FieldIdentifier[float64]{
		Field:     "Float64",
		ModelType: basicTypesType,
	},
	ID: query.FieldIdentifier[model.UUID]{
		Field:     "ID",
		ModelType: basicTypesType,
	},
	Int: query.FieldIdentifier[int]{
		Field:     "Int",
		ModelType: basicTypesType,
	},
	Int16: query.FieldIdentifier[int16]{
		Field:     "Int16",
		ModelType: basicTypesType,
	},
	Int32: query.FieldIdentifier[int32]{
		Field:     "Int32",
		ModelType: basicTypesType,
	},
	Int64: query.FieldIdentifier[int64]{
		Field:     "Int64",
		ModelType: basicTypesType,
	},
	Int8: query.FieldIdentifier[int8]{
		Field:     "Int8",
		ModelType: basicTypesType,
	},
	String: query.FieldIdentifier[string]{
		Field:     "String",
		ModelType: basicTypesType,
	},
	UInt: query.FieldIdentifier[uint]{
		Field:     "UInt",
		ModelType: basicTypesType,
	},
	UInt16: query.FieldIdentifier[uint16]{
		Field:     "UInt16",
		ModelType: basicTypesType,
	},
	UInt32: query.FieldIdentifier[uint32]{
		Field:     "UInt32",
		ModelType: basicTypesType,
	},
	UInt64: query.FieldIdentifier[uint64]{
		Field:     "UInt64",
		ModelType: basicTypesType,
	},
	UInt8: query.FieldIdentifier[uint8]{
		Field:     "UInt8",
		ModelType: basicTypesType,
	},
	UIntptr: query.FieldIdentifier[uintptr]{
		Field:     "UIntptr",
		ModelType: basicTypesType,
	},
	UpdatedAt: query.FieldIdentifier[time.Time]{
		Field:     "UpdatedAt",
		ModelType: basicTypesType,
	},
}

// Preload allows preloading the BasicTypes when doing a query
func (basicTypesConditions basicTypesConditions) Preload() condition.Condition[basictypes.BasicTypes] {
	return condition.NewPreloadCondition[basictypes.BasicTypes](basicTypesConditions.ID, basicTypesConditions.CreatedAt, basicTypesConditions.UpdatedAt, basicTypesConditions.DeletedAt, basicTypesConditions.Bool, basicTypesConditions.Int, basicTypesConditions.Int8, basicTypesConditions.Int16, basicTypesConditions.Int32, basicTypesConditions.Int64, basicTypesConditions.UInt, basicTypesConditions.UInt8, basicTypesConditions.UInt16, basicTypesConditions.UInt32, basicTypesConditions.UInt64, basicTypesConditions.UIntptr, basicTypesConditions.Float32, basicTypesConditions.Float64, basicTypesConditions.Complex64, basicTypesConditions.Complex128, basicTypesConditions.String, basicTypesConditions.Byte)
}
