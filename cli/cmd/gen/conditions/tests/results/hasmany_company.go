// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	hasmany "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/hasmany"
	orm "github.com/ditrit/badaas/orm"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var companyType = reflect.TypeOf(*new(hasmany.Company))

func (companyConditions companyConditions) IdIs() orm.FieldIs[hasmany.Company, model.UUID] {
	return orm.FieldIs[hasmany.Company, model.UUID]{FieldID: companyConditions.ID}
}
func (companyConditions companyConditions) CreatedAtIs() orm.FieldIs[hasmany.Company, time.Time] {
	return orm.FieldIs[hasmany.Company, time.Time]{FieldID: companyConditions.CreatedAt}
}
func (companyConditions companyConditions) UpdatedAtIs() orm.FieldIs[hasmany.Company, time.Time] {
	return orm.FieldIs[hasmany.Company, time.Time]{FieldID: companyConditions.UpdatedAt}
}
func (companyConditions companyConditions) DeletedAtIs() orm.FieldIs[hasmany.Company, time.Time] {
	return orm.FieldIs[hasmany.Company, time.Time]{FieldID: companyConditions.DeletedAt}
}
func (companyConditions companyConditions) PreloadSellers(nestedPreloads ...condition.JoinCondition[hasmany.Seller]) condition.Condition[hasmany.Company] {
	return condition.NewCollectionPreloadCondition[hasmany.Company, hasmany.Seller]("Sellers", nestedPreloads)
}

type companyConditions struct {
	ID        query.FieldIdentifier[model.UUID]
	CreatedAt query.FieldIdentifier[time.Time]
	UpdatedAt query.FieldIdentifier[time.Time]
	DeletedAt query.FieldIdentifier[time.Time]
}

var Company = companyConditions{
	CreatedAt: query.FieldIdentifier[time.Time]{
		Field:     "CreatedAt",
		ModelType: companyType,
	},
	DeletedAt: query.FieldIdentifier[time.Time]{
		Field:     "DeletedAt",
		ModelType: companyType,
	},
	ID: query.FieldIdentifier[model.UUID]{
		Field:     "ID",
		ModelType: companyType,
	},
	UpdatedAt: query.FieldIdentifier[time.Time]{
		Field:     "UpdatedAt",
		ModelType: companyType,
	},
}

// Preload allows preloading the Company when doing a query
func (companyConditions companyConditions) Preload() condition.Condition[hasmany.Company] {
	return condition.NewPreloadCondition[hasmany.Company](companyConditions.ID, companyConditions.CreatedAt, companyConditions.UpdatedAt, companyConditions.DeletedAt)
}

// PreloadRelations allows preloading all the Company's relation when doing a query
func (companyConditions companyConditions) PreloadRelations() []condition.Condition[hasmany.Company] {
	return []condition.Condition[hasmany.Company]{companyConditions.PreloadSellers()}
}
