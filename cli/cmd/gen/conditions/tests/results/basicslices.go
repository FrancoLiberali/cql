// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	basicslices "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/basicslices"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var basicSlicesType = reflect.TypeOf(*new(basicslices.BasicSlices))
var BasicSlicesIdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: basicSlicesType,
}

func BasicSlicesId(operator operator.Operator[model.UUID]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, model.UUID](BasicSlicesIdField, operator)
}

var BasicSlicesCreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: basicSlicesType,
}

func BasicSlicesCreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, time.Time](BasicSlicesCreatedAtField, operator)
}

var BasicSlicesUpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: basicSlicesType,
}

func BasicSlicesUpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, time.Time](BasicSlicesUpdatedAtField, operator)
}

var BasicSlicesDeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: basicSlicesType,
}

func BasicSlicesDeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, time.Time](BasicSlicesDeletedAtField, operator)
}

var BasicSlicesBoolField = query.FieldIdentifier[[]bool]{
	Field:     "Bool",
	ModelType: basicSlicesType,
}

func BasicSlicesBool(operator operator.Operator[[]bool]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []bool](BasicSlicesBoolField, operator)
}

var BasicSlicesIntField = query.FieldIdentifier[[]int]{
	Field:     "Int",
	ModelType: basicSlicesType,
}

func BasicSlicesInt(operator operator.Operator[[]int]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []int](BasicSlicesIntField, operator)
}

var BasicSlicesInt8Field = query.FieldIdentifier[[]int8]{
	Field:     "Int8",
	ModelType: basicSlicesType,
}

func BasicSlicesInt8(operator operator.Operator[[]int8]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []int8](BasicSlicesInt8Field, operator)
}

var BasicSlicesInt16Field = query.FieldIdentifier[[]int16]{
	Field:     "Int16",
	ModelType: basicSlicesType,
}

func BasicSlicesInt16(operator operator.Operator[[]int16]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []int16](BasicSlicesInt16Field, operator)
}

var BasicSlicesInt32Field = query.FieldIdentifier[[]int32]{
	Field:     "Int32",
	ModelType: basicSlicesType,
}

func BasicSlicesInt32(operator operator.Operator[[]int32]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []int32](BasicSlicesInt32Field, operator)
}

var BasicSlicesInt64Field = query.FieldIdentifier[[]int64]{
	Field:     "Int64",
	ModelType: basicSlicesType,
}

func BasicSlicesInt64(operator operator.Operator[[]int64]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []int64](BasicSlicesInt64Field, operator)
}

var BasicSlicesUIntField = query.FieldIdentifier[[]uint]{
	Field:     "UInt",
	ModelType: basicSlicesType,
}

func BasicSlicesUInt(operator operator.Operator[[]uint]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []uint](BasicSlicesUIntField, operator)
}

var BasicSlicesUInt8Field = query.FieldIdentifier[[]uint8]{
	Field:     "UInt8",
	ModelType: basicSlicesType,
}

func BasicSlicesUInt8(operator operator.Operator[[]uint8]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []uint8](BasicSlicesUInt8Field, operator)
}

var BasicSlicesUInt16Field = query.FieldIdentifier[[]uint16]{
	Field:     "UInt16",
	ModelType: basicSlicesType,
}

func BasicSlicesUInt16(operator operator.Operator[[]uint16]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []uint16](BasicSlicesUInt16Field, operator)
}

var BasicSlicesUInt32Field = query.FieldIdentifier[[]uint32]{
	Field:     "UInt32",
	ModelType: basicSlicesType,
}

func BasicSlicesUInt32(operator operator.Operator[[]uint32]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []uint32](BasicSlicesUInt32Field, operator)
}

var BasicSlicesUInt64Field = query.FieldIdentifier[[]uint64]{
	Field:     "UInt64",
	ModelType: basicSlicesType,
}

func BasicSlicesUInt64(operator operator.Operator[[]uint64]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []uint64](BasicSlicesUInt64Field, operator)
}

var BasicSlicesUIntptrField = query.FieldIdentifier[[]uintptr]{
	Field:     "UIntptr",
	ModelType: basicSlicesType,
}

func BasicSlicesUIntptr(operator operator.Operator[[]uintptr]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []uintptr](BasicSlicesUIntptrField, operator)
}

var BasicSlicesFloat32Field = query.FieldIdentifier[[]float32]{
	Field:     "Float32",
	ModelType: basicSlicesType,
}

func BasicSlicesFloat32(operator operator.Operator[[]float32]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []float32](BasicSlicesFloat32Field, operator)
}

var BasicSlicesFloat64Field = query.FieldIdentifier[[]float64]{
	Field:     "Float64",
	ModelType: basicSlicesType,
}

func BasicSlicesFloat64(operator operator.Operator[[]float64]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []float64](BasicSlicesFloat64Field, operator)
}

var BasicSlicesComplex64Field = query.FieldIdentifier[[]complex64]{
	Field:     "Complex64",
	ModelType: basicSlicesType,
}

func BasicSlicesComplex64(operator operator.Operator[[]complex64]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []complex64](BasicSlicesComplex64Field, operator)
}

var BasicSlicesComplex128Field = query.FieldIdentifier[[]complex128]{
	Field:     "Complex128",
	ModelType: basicSlicesType,
}

func BasicSlicesComplex128(operator operator.Operator[[]complex128]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []complex128](BasicSlicesComplex128Field, operator)
}

var BasicSlicesStringField = query.FieldIdentifier[[]string]{
	Field:     "String",
	ModelType: basicSlicesType,
}

func BasicSlicesString(operator operator.Operator[[]string]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []string](BasicSlicesStringField, operator)
}

var BasicSlicesByteField = query.FieldIdentifier[[]uint8]{
	Field:     "Byte",
	ModelType: basicSlicesType,
}

func BasicSlicesByte(operator operator.Operator[[]uint8]) condition.WhereCondition[basicslices.BasicSlices] {
	return condition.NewFieldCondition[basicslices.BasicSlices, []uint8](BasicSlicesByteField, operator)
}

var BasicSlicesPreloadAttributes = condition.NewPreloadCondition[basicslices.BasicSlices](BasicSlicesIdField, BasicSlicesCreatedAtField, BasicSlicesUpdatedAtField, BasicSlicesDeletedAtField, BasicSlicesBoolField, BasicSlicesIntField, BasicSlicesInt8Field, BasicSlicesInt16Field, BasicSlicesInt32Field, BasicSlicesInt64Field, BasicSlicesUIntField, BasicSlicesUInt8Field, BasicSlicesUInt16Field, BasicSlicesUInt32Field, BasicSlicesUInt64Field, BasicSlicesUIntptrField, BasicSlicesFloat32Field, BasicSlicesFloat64Field, BasicSlicesComplex64Field, BasicSlicesComplex128Field, BasicSlicesStringField, BasicSlicesByteField)
