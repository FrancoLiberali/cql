// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	basicslices "github.com/ditrit/badaas-orm/cli/cmd/gen/conditions/tests/basicslices"
	orm "github.com/ditrit/badaas/orm"
	gorm "gorm.io/gorm"
	"time"
)

func BasicSlicesId(v orm.UUID) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "ID",
		Value: v,
	}
}
func BasicSlicesCreatedAt(v time.Time) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "CreatedAt",
		Value: v,
	}
}
func BasicSlicesUpdatedAt(v time.Time) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "UpdatedAt",
		Value: v,
	}
}
func BasicSlicesDeletedAt(v gorm.DeletedAt) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "DeletedAt",
		Value: v,
	}
}
func BasicSlicesBool(v []bool) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Bool",
		Value: v,
	}
}
func BasicSlicesInt(v []int) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Int",
		Value: v,
	}
}
func BasicSlicesInt8(v []int8) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Int8",
		Value: v,
	}
}
func BasicSlicesInt16(v []int16) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Int16",
		Value: v,
	}
}
func BasicSlicesInt32(v []int32) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Int32",
		Value: v,
	}
}
func BasicSlicesInt64(v []int64) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Int64",
		Value: v,
	}
}
func BasicSlicesUInt(v []uint) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "UInt",
		Value: v,
	}
}
func BasicSlicesUInt8(v []uint8) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "UInt8",
		Value: v,
	}
}
func BasicSlicesUInt16(v []uint16) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "UInt16",
		Value: v,
	}
}
func BasicSlicesUInt32(v []uint32) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "UInt32",
		Value: v,
	}
}
func BasicSlicesUInt64(v []uint64) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "UInt64",
		Value: v,
	}
}
func BasicSlicesUIntptr(v []uintptr) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "UIntptr",
		Value: v,
	}
}
func BasicSlicesFloat32(v []float32) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Float32",
		Value: v,
	}
}
func BasicSlicesFloat64(v []float64) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Float64",
		Value: v,
	}
}
func BasicSlicesComplex64(v []complex64) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Complex64",
		Value: v,
	}
}
func BasicSlicesComplex128(v []complex128) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Complex128",
		Value: v,
	}
}
func BasicSlicesString(v []string) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "String",
		Value: v,
	}
}
func BasicSlicesByte(v []uint8) orm.WhereCondition[basicslices.BasicSlices] {
	return orm.WhereCondition[basicslices.BasicSlices]{
		Field: "Byte",
		Value: v,
	}
}
