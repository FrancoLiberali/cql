// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	package2 "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/multiplepackage/package2"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	operator "github.com/ditrit/badaas/orm/operator"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var package2Type = reflect.TypeOf(*new(package2.Package2))
var Package2IdField = query.FieldIdentifier[model.UUID]{
	Field:     "ID",
	ModelType: package2Type,
}

func Package2Id(operator operator.Operator[model.UUID]) condition.WhereCondition[package2.Package2] {
	return condition.NewFieldCondition[package2.Package2, model.UUID](Package2IdField, operator)
}

var Package2CreatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "CreatedAt",
	ModelType: package2Type,
}

func Package2CreatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[package2.Package2] {
	return condition.NewFieldCondition[package2.Package2, time.Time](Package2CreatedAtField, operator)
}

var Package2UpdatedAtField = query.FieldIdentifier[time.Time]{
	Field:     "UpdatedAt",
	ModelType: package2Type,
}

func Package2UpdatedAt(operator operator.Operator[time.Time]) condition.WhereCondition[package2.Package2] {
	return condition.NewFieldCondition[package2.Package2, time.Time](Package2UpdatedAtField, operator)
}

var Package2DeletedAtField = query.FieldIdentifier[time.Time]{
	Field:     "DeletedAt",
	ModelType: package2Type,
}

func Package2DeletedAt(operator operator.Operator[time.Time]) condition.WhereCondition[package2.Package2] {
	return condition.NewFieldCondition[package2.Package2, time.Time](Package2DeletedAtField, operator)
}

var Package2Package1IdField = query.FieldIdentifier[model.UUID]{
	Field:     "Package1ID",
	ModelType: package2Type,
}

func Package2Package1Id(operator operator.Operator[model.UUID]) condition.WhereCondition[package2.Package2] {
	return condition.NewFieldCondition[package2.Package2, model.UUID](Package2Package1IdField, operator)
}

var Package2PreloadAttributes = condition.NewPreloadCondition[package2.Package2](Package2IdField, Package2CreatedAtField, Package2UpdatedAtField, Package2DeletedAtField, Package2Package1IdField)
