// Code generated by cql-gen v0.0.5, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	hasmany "github.com/FrancoLiberali/cql/cql-gen/cmd/gen/conditions/tests/hasmany"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

func (companyConditions companyConditions) PreloadSellers(nestedPreloads ...condition.JoinCondition[hasmany.Seller]) condition.Condition[hasmany.Company] {
	return condition.NewCollectionPreloadCondition[hasmany.Company, hasmany.Seller]("Sellers", nestedPreloads)
}

type companyConditions struct {
	ID        condition.Field[hasmany.Company, model.UUID]
	CreatedAt condition.Field[hasmany.Company, time.Time]
	UpdatedAt condition.Field[hasmany.Company, time.Time]
	DeletedAt condition.Field[hasmany.Company, time.Time]
}

var Company = companyConditions{
	CreatedAt: condition.Field[hasmany.Company, time.Time]{Name: "CreatedAt"},
	DeletedAt: condition.Field[hasmany.Company, time.Time]{Name: "DeletedAt"},
	ID:        condition.Field[hasmany.Company, model.UUID]{Name: "ID"},
	UpdatedAt: condition.Field[hasmany.Company, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Company when doing a query
func (companyConditions companyConditions) preload() condition.Condition[hasmany.Company] {
	return condition.NewPreloadCondition[hasmany.Company](companyConditions.ID, companyConditions.CreatedAt, companyConditions.UpdatedAt, companyConditions.DeletedAt)
}
