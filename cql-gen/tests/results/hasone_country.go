// Code generated by cql-gen v0.0.8, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	hasone "github.com/FrancoLiberali/cql/cql-gen/cmd/gen/conditions/tests/hasone"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

func (countryConditions countryConditions) Capital(conditions ...condition.Condition[hasone.City]) condition.JoinCondition[hasone.Country] {
	return condition.NewJoinCondition[hasone.Country, hasone.City](conditions, "Capital", "ID", countryConditions.preload(), "CountryID", City.preload())
}

type countryConditions struct {
	ID        condition.Field[hasone.Country, model.UUID]
	CreatedAt condition.Field[hasone.Country, time.Time]
	UpdatedAt condition.Field[hasone.Country, time.Time]
	DeletedAt condition.Field[hasone.Country, time.Time]
}

var Country = countryConditions{
	CreatedAt: condition.NewField[hasone.Country, time.Time]("CreatedAt", "", ""),
	DeletedAt: condition.NewField[hasone.Country, time.Time]("DeletedAt", "", ""),
	ID:        condition.NewField[hasone.Country, model.UUID]("ID", "", ""),
	UpdatedAt: condition.NewField[hasone.Country, time.Time]("UpdatedAt", "", ""),
}

// Preload allows preloading the Country when doing a query
func (countryConditions countryConditions) preload() condition.Condition[hasone.Country] {
	return condition.NewPreloadCondition[hasone.Country](countryConditions.ID, countryConditions.CreatedAt, countryConditions.UpdatedAt, countryConditions.DeletedAt)
}
