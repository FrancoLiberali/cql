// Code generated by cql-gen v0.0.8, DO NOT EDIT.
package conditions

import (
	overrideforeignkeyinverse "github.com/FrancoLiberali/cql-gen/cmd/gen/conditions/tests/overrideforeignkeyinverse"
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

func (userConditions userConditions) CreditCard(conditions ...condition.Condition[overrideforeignkeyinverse.CreditCard]) condition.JoinCondition[overrideforeignkeyinverse.User] {
	return condition.NewJoinCondition[overrideforeignkeyinverse.User, overrideforeignkeyinverse.CreditCard](conditions, "CreditCard", "ID", userConditions.preload(), "UserReference", CreditCard.preload())
}

type userConditions struct {
	ID        condition.Field[overrideforeignkeyinverse.User, model.UUID]
	CreatedAt condition.Field[overrideforeignkeyinverse.User, time.Time]
	UpdatedAt condition.Field[overrideforeignkeyinverse.User, time.Time]
	DeletedAt condition.Field[overrideforeignkeyinverse.User, time.Time]
}

var User = userConditions{
	CreatedAt: condition.NewField[overrideforeignkeyinverse.User, time.Time]("CreatedAt", "", ""),
	DeletedAt: condition.NewField[overrideforeignkeyinverse.User, time.Time]("DeletedAt", "", ""),
	ID:        condition.NewField[overrideforeignkeyinverse.User, model.UUID]("ID", "", ""),
	UpdatedAt: condition.NewField[overrideforeignkeyinverse.User, time.Time]("UpdatedAt", "", ""),
}

// Preload allows preloading the User when doing a query
func (userConditions userConditions) preload() condition.Condition[overrideforeignkeyinverse.User] {
	return condition.NewPreloadCondition[overrideforeignkeyinverse.User](userConditions.ID, userConditions.CreatedAt, userConditions.UpdatedAt, userConditions.DeletedAt)
}
