// Code generated by cql-gen v0.0.8, DO NOT EDIT.
package conditions

import (
	basictypes "github.com/FrancoLiberali/cql-gen/cmd/gen/conditions/tests/basictypes"
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

type basicTypesConditions struct {
	ID         condition.Field[basictypes.BasicTypes, model.UUID]
	CreatedAt  condition.Field[basictypes.BasicTypes, time.Time]
	UpdatedAt  condition.Field[basictypes.BasicTypes, time.Time]
	DeletedAt  condition.Field[basictypes.BasicTypes, time.Time]
	Bool       condition.BoolField[basictypes.BasicTypes]
	Int        condition.UpdatableField[basictypes.BasicTypes, int]
	Int8       condition.UpdatableField[basictypes.BasicTypes, int8]
	Int16      condition.UpdatableField[basictypes.BasicTypes, int16]
	Int32      condition.UpdatableField[basictypes.BasicTypes, int32]
	Int64      condition.UpdatableField[basictypes.BasicTypes, int64]
	UInt       condition.UpdatableField[basictypes.BasicTypes, uint]
	UInt8      condition.UpdatableField[basictypes.BasicTypes, uint8]
	UInt16     condition.UpdatableField[basictypes.BasicTypes, uint16]
	UInt32     condition.UpdatableField[basictypes.BasicTypes, uint32]
	UInt64     condition.UpdatableField[basictypes.BasicTypes, uint64]
	UIntptr    condition.UpdatableField[basictypes.BasicTypes, uintptr]
	Float32    condition.UpdatableField[basictypes.BasicTypes, float32]
	Float64    condition.UpdatableField[basictypes.BasicTypes, float64]
	Complex64  condition.UpdatableField[basictypes.BasicTypes, complex64]
	Complex128 condition.UpdatableField[basictypes.BasicTypes, complex128]
	String     condition.StringField[basictypes.BasicTypes]
	Byte       condition.UpdatableField[basictypes.BasicTypes, uint8]
}

var BasicTypes = basicTypesConditions{
	Bool:       condition.NewBoolField[basictypes.BasicTypes]("Bool", "", ""),
	Byte:       condition.NewUpdatableField[basictypes.BasicTypes, uint8]("Byte", "", ""),
	Complex128: condition.NewUpdatableField[basictypes.BasicTypes, complex128]("Complex128", "", ""),
	Complex64:  condition.NewUpdatableField[basictypes.BasicTypes, complex64]("Complex64", "", ""),
	CreatedAt:  condition.NewField[basictypes.BasicTypes, time.Time]("CreatedAt", "", ""),
	DeletedAt:  condition.NewField[basictypes.BasicTypes, time.Time]("DeletedAt", "", ""),
	Float32:    condition.NewUpdatableField[basictypes.BasicTypes, float32]("Float32", "", ""),
	Float64:    condition.NewUpdatableField[basictypes.BasicTypes, float64]("Float64", "", ""),
	ID:         condition.NewField[basictypes.BasicTypes, model.UUID]("ID", "", ""),
	Int:        condition.NewUpdatableField[basictypes.BasicTypes, int]("Int", "", ""),
	Int16:      condition.NewUpdatableField[basictypes.BasicTypes, int16]("Int16", "", ""),
	Int32:      condition.NewUpdatableField[basictypes.BasicTypes, int32]("Int32", "", ""),
	Int64:      condition.NewUpdatableField[basictypes.BasicTypes, int64]("Int64", "", ""),
	Int8:       condition.NewUpdatableField[basictypes.BasicTypes, int8]("Int8", "", ""),
	String:     condition.NewStringField[basictypes.BasicTypes]("String", "", ""),
	UInt:       condition.NewUpdatableField[basictypes.BasicTypes, uint]("UInt", "", ""),
	UInt16:     condition.NewUpdatableField[basictypes.BasicTypes, uint16]("UInt16", "", ""),
	UInt32:     condition.NewUpdatableField[basictypes.BasicTypes, uint32]("UInt32", "", ""),
	UInt64:     condition.NewUpdatableField[basictypes.BasicTypes, uint64]("UInt64", "", ""),
	UInt8:      condition.NewUpdatableField[basictypes.BasicTypes, uint8]("UInt8", "", ""),
	UIntptr:    condition.NewUpdatableField[basictypes.BasicTypes, uintptr]("UIntptr", "", ""),
	UpdatedAt:  condition.NewField[basictypes.BasicTypes, time.Time]("UpdatedAt", "", ""),
}

// Preload allows preloading the BasicTypes when doing a query
func (basicTypesConditions basicTypesConditions) preload() condition.Condition[basictypes.BasicTypes] {
	return condition.NewPreloadCondition[basictypes.BasicTypes](basicTypesConditions.ID, basicTypesConditions.CreatedAt, basicTypesConditions.UpdatedAt, basicTypesConditions.DeletedAt, basicTypesConditions.Bool, basicTypesConditions.Int, basicTypesConditions.Int8, basicTypesConditions.Int16, basicTypesConditions.Int32, basicTypesConditions.Int64, basicTypesConditions.UInt, basicTypesConditions.UInt8, basicTypesConditions.UInt16, basicTypesConditions.UInt32, basicTypesConditions.UInt64, basicTypesConditions.UIntptr, basicTypesConditions.Float32, basicTypesConditions.Float64, basicTypesConditions.Complex64, basicTypesConditions.Complex128, basicTypesConditions.String, basicTypesConditions.Byte)
}
