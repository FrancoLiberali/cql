// Code generated by cql-gen v0.0.5, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	package2 "github.com/FrancoLiberali/cql/cql-gen/cmd/gen/conditions/tests/multiplepackage/package2"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

type package2Conditions struct {
	ID         condition.Field[package2.Package2, model.UUID]
	CreatedAt  condition.Field[package2.Package2, time.Time]
	UpdatedAt  condition.Field[package2.Package2, time.Time]
	DeletedAt  condition.Field[package2.Package2, time.Time]
	Package1ID condition.UpdatableField[package2.Package2, model.UUID]
}

var Package2 = package2Conditions{
	CreatedAt:  condition.Field[package2.Package2, time.Time]{Name: "CreatedAt"},
	DeletedAt:  condition.Field[package2.Package2, time.Time]{Name: "DeletedAt"},
	ID:         condition.Field[package2.Package2, model.UUID]{Name: "ID"},
	Package1ID: condition.UpdatableField[package2.Package2, model.UUID]{Field: condition.Field[package2.Package2, model.UUID]{Name: "Package1ID"}},
	UpdatedAt:  condition.Field[package2.Package2, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Package2 when doing a query
func (package2Conditions package2Conditions) preload() condition.Condition[package2.Package2] {
	return condition.NewPreloadCondition[package2.Package2](package2Conditions.ID, package2Conditions.CreatedAt, package2Conditions.UpdatedAt, package2Conditions.DeletedAt, package2Conditions.Package1ID)
}
