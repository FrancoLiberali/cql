// Code generated by cql-gen v0.0.3, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	basicslices "github.com/FrancoLiberali/cql/cql-gen/cmd/gen/conditions/tests/basicslices"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

type basicSlicesConditions struct {
	ID         condition.Field[basicslices.BasicSlices, model.UUID]
	CreatedAt  condition.Field[basicslices.BasicSlices, time.Time]
	UpdatedAt  condition.Field[basicslices.BasicSlices, time.Time]
	DeletedAt  condition.Field[basicslices.BasicSlices, time.Time]
	Bool       condition.UpdatableField[basicslices.BasicSlices, []bool]
	Int        condition.UpdatableField[basicslices.BasicSlices, []int]
	Int8       condition.UpdatableField[basicslices.BasicSlices, []int8]
	Int16      condition.UpdatableField[basicslices.BasicSlices, []int16]
	Int32      condition.UpdatableField[basicslices.BasicSlices, []int32]
	Int64      condition.UpdatableField[basicslices.BasicSlices, []int64]
	UInt       condition.UpdatableField[basicslices.BasicSlices, []uint]
	UInt8      condition.UpdatableField[basicslices.BasicSlices, []uint8]
	UInt16     condition.UpdatableField[basicslices.BasicSlices, []uint16]
	UInt32     condition.UpdatableField[basicslices.BasicSlices, []uint32]
	UInt64     condition.UpdatableField[basicslices.BasicSlices, []uint64]
	UIntptr    condition.UpdatableField[basicslices.BasicSlices, []uintptr]
	Float32    condition.UpdatableField[basicslices.BasicSlices, []float32]
	Float64    condition.UpdatableField[basicslices.BasicSlices, []float64]
	Complex64  condition.UpdatableField[basicslices.BasicSlices, []complex64]
	Complex128 condition.UpdatableField[basicslices.BasicSlices, []complex128]
	String     condition.UpdatableField[basicslices.BasicSlices, []string]
	Byte       condition.UpdatableField[basicslices.BasicSlices, []uint8]
}

var BasicSlices = basicSlicesConditions{
	Bool:       condition.UpdatableField[basicslices.BasicSlices, []bool]{Field: condition.Field[basicslices.BasicSlices, []bool]{Name: "Bool"}},
	Byte:       condition.UpdatableField[basicslices.BasicSlices, []uint8]{Field: condition.Field[basicslices.BasicSlices, []uint8]{Name: "Byte"}},
	Complex128: condition.UpdatableField[basicslices.BasicSlices, []complex128]{Field: condition.Field[basicslices.BasicSlices, []complex128]{Name: "Complex128"}},
	Complex64:  condition.UpdatableField[basicslices.BasicSlices, []complex64]{Field: condition.Field[basicslices.BasicSlices, []complex64]{Name: "Complex64"}},
	CreatedAt:  condition.Field[basicslices.BasicSlices, time.Time]{Name: "CreatedAt"},
	DeletedAt:  condition.Field[basicslices.BasicSlices, time.Time]{Name: "DeletedAt"},
	Float32:    condition.UpdatableField[basicslices.BasicSlices, []float32]{Field: condition.Field[basicslices.BasicSlices, []float32]{Name: "Float32"}},
	Float64:    condition.UpdatableField[basicslices.BasicSlices, []float64]{Field: condition.Field[basicslices.BasicSlices, []float64]{Name: "Float64"}},
	ID:         condition.Field[basicslices.BasicSlices, model.UUID]{Name: "ID"},
	Int:        condition.UpdatableField[basicslices.BasicSlices, []int]{Field: condition.Field[basicslices.BasicSlices, []int]{Name: "Int"}},
	Int16:      condition.UpdatableField[basicslices.BasicSlices, []int16]{Field: condition.Field[basicslices.BasicSlices, []int16]{Name: "Int16"}},
	Int32:      condition.UpdatableField[basicslices.BasicSlices, []int32]{Field: condition.Field[basicslices.BasicSlices, []int32]{Name: "Int32"}},
	Int64:      condition.UpdatableField[basicslices.BasicSlices, []int64]{Field: condition.Field[basicslices.BasicSlices, []int64]{Name: "Int64"}},
	Int8:       condition.UpdatableField[basicslices.BasicSlices, []int8]{Field: condition.Field[basicslices.BasicSlices, []int8]{Name: "Int8"}},
	String:     condition.UpdatableField[basicslices.BasicSlices, []string]{Field: condition.Field[basicslices.BasicSlices, []string]{Name: "String"}},
	UInt:       condition.UpdatableField[basicslices.BasicSlices, []uint]{Field: condition.Field[basicslices.BasicSlices, []uint]{Name: "UInt"}},
	UInt16:     condition.UpdatableField[basicslices.BasicSlices, []uint16]{Field: condition.Field[basicslices.BasicSlices, []uint16]{Name: "UInt16"}},
	UInt32:     condition.UpdatableField[basicslices.BasicSlices, []uint32]{Field: condition.Field[basicslices.BasicSlices, []uint32]{Name: "UInt32"}},
	UInt64:     condition.UpdatableField[basicslices.BasicSlices, []uint64]{Field: condition.Field[basicslices.BasicSlices, []uint64]{Name: "UInt64"}},
	UInt8:      condition.UpdatableField[basicslices.BasicSlices, []uint8]{Field: condition.Field[basicslices.BasicSlices, []uint8]{Name: "UInt8"}},
	UIntptr:    condition.UpdatableField[basicslices.BasicSlices, []uintptr]{Field: condition.Field[basicslices.BasicSlices, []uintptr]{Name: "UIntptr"}},
	UpdatedAt:  condition.Field[basicslices.BasicSlices, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the BasicSlices when doing a query
func (basicSlicesConditions basicSlicesConditions) Preload() condition.Condition[basicslices.BasicSlices] {
	return condition.NewPreloadCondition[basicslices.BasicSlices](basicSlicesConditions.ID, basicSlicesConditions.CreatedAt, basicSlicesConditions.UpdatedAt, basicSlicesConditions.DeletedAt, basicSlicesConditions.Bool, basicSlicesConditions.Int, basicSlicesConditions.Int8, basicSlicesConditions.Int16, basicSlicesConditions.Int32, basicSlicesConditions.Int64, basicSlicesConditions.UInt, basicSlicesConditions.UInt8, basicSlicesConditions.UInt16, basicSlicesConditions.UInt32, basicSlicesConditions.UInt64, basicSlicesConditions.UIntptr, basicSlicesConditions.Float32, basicSlicesConditions.Float64, basicSlicesConditions.Complex64, basicSlicesConditions.Complex128, basicSlicesConditions.String, basicSlicesConditions.Byte)
}
